{
    "benchmarks.GxadminSuite.time_query_collection_usage": {
        "code": "class GxadminSuite:\n    def time_query_collection_usage(self):\n        query = \"\"\"\n            SELECT\n            dc.collection_type, count(*)\n            FROM\n            history_dataset_collection_association as hdca\n            INNER JOIN\n            dataset_collection as dc\n            ON hdca.collection_id = dc.id\n            GROUP BY\n            dc.collection_type\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'collection-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_collection_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "7861f4f890f2802098e3f830e7c125b6be7ad98eb19881d7617e0a776bff4cce", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_data_origin_distribution": {
        "code": "class GxadminSuite:\n    def time_query_data_origin_distribution(self):\n        query = \"\"\"\n            WITH asdf AS (\n            SELECT\n            case when job.tool_id = 'upload1' then 'created' else 'derived' end AS origin,\n            sum(coalesce(dataset.total_size, dataset.file_size, 0)) AS data,\n            date_trunc('month', dataset.create_time) as created,\n            COALESCE(job.user_id::text, '__UNKNOWN__')\n            FROM job\n            LEFT JOIN job_to_output_dataset ON job.id = job_to_output_dataset.job_id\n            LEFT JOIN history_dataset_association ON job_to_output_dataset.dataset_id = history_dataset_association.id\n            LEFT JOIN dataset ON history_dataset_association.dataset_id = dataset.id\n            GROUP BY\n            origin, job.user_id, created, galaxy_user\n            )\n            SELECT\n            origin,\n            round(data, 2 - length(data::text)),\n            created,\n            galaxy_user\n            FROM asdf\n            ORDER BY galaxy_user desc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'data-origin-distribution',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_data_origin_distribution", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e3f5ce56e92d0ca942da3eb33f055ab5c03c73ebf528e0999bbc4f669ed6c0dd", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_data_origin_distribution_summary": {
        "code": "class GxadminSuite:\n    def time_query_data_origin_distribution_summary(self):\n        query = \"\"\"\n            WITH user_job_data AS (\n            SELECT\n            case when job.tool_id = 'upload1' then 'created' else 'derived' end AS origin,\n            sum(coalesce(dataset.total_size, dataset.file_size, 0)) AS data,\n            job.user_id\n            FROM job\n            LEFT JOIN job_to_output_dataset ON job.id = job_to_output_dataset.job_id\n            LEFT JOIN history_dataset_association ON job_to_output_dataset.dataset_id = history_dataset_association.id\n            LEFT JOIN dataset ON history_dataset_association.dataset_id = dataset.id\n            GROUP BY\n            origin, job.user_id\n            )\n    \n            SELECT\n            origin,\n            min(data) AS min,\n            percentile_cont(0.25) WITHIN GROUP (ORDER BY data) ::bigint AS quant_1st,\n            percentile_cont(0.50) WITHIN GROUP (ORDER BY data) ::bigint AS median,\n            avg(data) AS mean,\n            percentile_cont(0.75) WITHIN GROUP (ORDER BY data) ::bigint AS quant_3rd,\n            percentile_cont(0.95) WITHIN GROUP (ORDER BY data) ::bigint AS perc_95,\n            percentile_cont(0.99) WITHIN GROUP (ORDER BY data) ::bigint AS perc_99,\n            max(data) AS max,\n            sum(data) AS sum,\n            stddev(data) AS stddev\n            FROM user_job_data\n            GROUP BY origin\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'data-origin-distribution-summary',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_data_origin_distribution_summary", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "c830dbc325a89fbef8134619eae4604f4a0271935cae229e60b0461a8ede38eb", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_datasets_created_daily": {
        "code": "class GxadminSuite:\n    def time_query_datasets_created_daily(self):\n        query = \"\"\"\n            WITH temp_queue_times AS\n            (select\n            date_trunc('day', create_time AT TIME ZONE 'UTC'),\n            sum(coalesce(total_size, file_size))\n            from dataset\n            group by date_trunc\n            order by date_trunc desc)\n            select\n            min(sum) AS min,\n            percentile_cont(0.25) WITHIN GROUP (ORDER BY sum) ::bigint AS quant_1st,\n            percentile_cont(0.50) WITHIN GROUP (ORDER BY sum) ::bigint AS median,\n            avg(sum) AS mean,\n            percentile_cont(0.75) WITHIN GROUP (ORDER BY sum) ::bigint AS quant_3rd,\n            percentile_cont(0.95) WITHIN GROUP (ORDER BY sum) ::bigint AS perc_95,\n            percentile_cont(0.99) WITHIN GROUP (ORDER BY sum) ::bigint AS perc_99,\n            max(sum) AS max,\n            sum(sum) AS sum,\n            stddev(sum) AS stddev\n            from temp_queue_times\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'datasets-created-daily',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_datasets_created_daily", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "c5ee81dd0a31c75d362591067858582f56ce81fe2226dd1e32abb31c143a45b9", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_disk_usage": {
        "code": "class GxadminSuite:\n    def time_query_disk_usage(self):\n        query = \"\"\"\n            SELECT\n            object_store_id, sum(coalesce(dataset.total_size, dataset.file_size, 0))\n            FROM dataset\n            WHERE NOT purged\n            GROUP BY object_store_id\n            ORDER BY sum(coalesce(dataset.total_size, dataset.file_size, 0)) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'disk-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_disk_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "065b22e6f942fb701051d0cc95c6ac087ce2ca26bc79bb5e410742cfb4cc5670", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_errored_jobs": {
        "code": "class GxadminSuite:\n    def time_query_errored_jobs(self):\n        query = \"\"\"\n            SELECT\n            job.id,\n            job.create_time AT TIME ZONE 'UTC' as create_time,\n            job.tool_id,\n            job.tool_version,\n            job.handler,\n            job.destination_id,\n            job.job_runner_external_id,\n    \n            COALESCE(galaxy_user.email::text, '__UNKNOWN__') AS email\n            FROM\n            job,\n            galaxy_user\n            WHERE\n            job.create_time >= (now() AT TIME ZONE 'UTC' - ' hours'::interval) AND\n            job.state = 'error' AND\n            job.user_id = galaxy_user.id\n            ORDER BY\n            job.id\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'errored-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_errored_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "39c97286f787909168253028b3629e05bc0fc2432082c1f197079cfa31a4b496", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_good_for_pulsar": {
        "code": "class GxadminSuite:\n    def time_query_good_for_pulsar(self):\n        query = \"\"\"\n            WITH job_data AS (\n            SELECT\n            regexp_replace(j.tool_id, '.*toolshed.*/repos/', '') as tool_id,\n            SUM(d.total_size) AS size,\n            MIN(jmn.metric_value) AS runtime,\n            SUM(d.total_size) / min(jmn.metric_value) AS score\n            FROM job j\n            LEFT JOIN job_to_input_dataset jtid ON j.id = jtid.job_id\n            LEFT JOIN history_dataset_association hda ON jtid.dataset_id = hda.id\n            LEFT JOIN dataset d ON hda.dataset_id = d.id\n            LEFT JOIN job_metric_numeric jmn ON j.id = jmn.job_id\n            WHERE jmn.metric_name = 'runtime_seconds'\n            AND d.total_size IS NOT NULL\n            GROUP BY j.id\n            )\n    \n            SELECT\n            tool_id,\n            percentile_cont(0.50) WITHIN GROUP (ORDER BY score) ::bigint AS median_score,\n            percentile_cont(0.50) WITHIN GROUP (ORDER BY runtime) ::bigint AS median_runtime,\n            pg_size_pretty(percentile_cont(0.50) WITHIN GROUP (ORDER BY size) ::bigint) AS median_size,\n            count(*)\n            FROM job_data\n            GROUP BY tool_id\n            ORDER BY median_score ASC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'good-for-pulsar',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_good_for_pulsar", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "c54ecc196c23e8f67a70fd800744a01cc300e51254c0afa5874c45d9c3a94d17", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_group_cpu_seconds": {
        "code": "class GxadminSuite:\n    def time_query_group_cpu_seconds(self):\n        query = \"\"\"\n            WITH jobs_info AS (\n            SELECT job.user_id,\n            round(sum(a.metric_value * b.metric_value), 2) AS cpu_seconds\n            FROM job_metric_numeric AS a,\n            job_metric_numeric AS b,\n            job\n            WHERE job.id = a.job_id\n            AND job.id = b.job_id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'galaxy_slots'\n            GROUP BY job.user_id\n            ), user_job_info AS (\n            SELECT user_id,\n            sum(cpu_seconds) AS cpu_seconds\n            FROM jobs_info\n            GROUP BY user_id\n            )\n    \n            SELECT row_number() OVER (ORDER BY round(sum(user_job_info.cpu_seconds), 0) DESC) as rank,\n            galaxy_group.id as group_id,\n            COALESCE(galaxy_group.name::text, 'Anonymous'),\n            round(sum(user_job_info.cpu_seconds), 0) as cpu_seconds\n            FROM user_job_info,\n            galaxy_group,\n            user_group_association\n            WHERE user_job_info.user_id = user_group_association.user_id\n            AND user_group_association.group_id = galaxy_group.id\n    \n            GROUP BY galaxy_group.id, galaxy_group.name\n            ORDER BY round(sum(user_job_info.cpu_seconds), 0) DESC\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'group-cpu-seconds',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_group_cpu_seconds", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3ba4444c692b8f46ab84b1dbbcdd80867b40092758f96b1193ce4c78c71b0a30", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_group_gpu_time": {
        "code": "class GxadminSuite:\n    def time_query_group_gpu_time(self):\n        query = \"\"\"\n            WITH jobs_info AS (\n            SELECT job.user_id,\n            round(sum(a.metric_value * length(replace(b.metric_value, ',', ''))), 2) AS gpu_seconds\n            FROM job_metric_numeric AS a,\n            job_metric_text AS b,\n            job\n            WHERE job.id = a.job_id\n            AND job.id = b.job_id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            GROUP BY job.user_id\n            ), user_job_info AS (\n            SELECT user_id,\n            sum(gpu_seconds) AS gpu_seconds\n            FROM jobs_info\n            GROUP BY user_id\n            )\n            SELECT row_number() OVER (ORDER BY round(sum(user_job_info.gpu_seconds), 0) DESC) as rank,\n            galaxy_group.id as group_id,\n            COALESCE(galaxy_group.name::text, 'Anonymous'),\n            round(sum(user_job_info.gpu_seconds), 0) as gpu_seconds\n            FROM user_job_info,\n            galaxy_group,\n            user_group_association\n            WHERE user_job_info.user_id = user_group_association.user_id\n            AND user_group_association.group_id = galaxy_group.id\n    \n            GROUP BY galaxy_group.id, galaxy_group.name\n            ORDER BY round(sum(user_job_info.gpu_seconds), 0) DESC\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'group-gpu-time',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_group_gpu_time", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a5580d2756b46822ae48645dc8b084e5d97375f6d9e6b2760b23f1fa812ef7c8", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_groups_list": {
        "code": "class GxadminSuite:\n    def time_query_groups_list(self):\n        query = \"\"\"\n            SELECT\n            galaxy_group.name, count(*)\n            FROM\n            galaxy_group, user_group_association\n            WHERE\n            user_group_association.group_id = galaxy_group.id\n            GROUP BY name\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'groups-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_groups_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "657b867cd28b00c0a1ac4ce48d55c0cbf99aec1b1f129ed3bd3c03d77e788ccc", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_hdca_datasets": {
        "code": "class GxadminSuite:\n    def time_query_hdca_datasets(self):\n        query = \"\"\"\n            SELECT element_index, hda_id, ldda_id, child_collection_id, element_identifier\n            FROM dataset_collection_element\n            WHERE dataset_collection_id =\n            ORDER by element_index asc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'hdca-datasets',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_hdca_datasets", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b8d816eb07c66ccb077f7de6c79d1d37bbb90b76737b2bc7ff4515b26d1f295b", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_hdca_info": {
        "code": "class GxadminSuite:\n    def time_query_hdca_info(self):\n        query = \"\"\"\n            SELECT *\n            FROM dataset_collection\n            WHERE id =\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'hdca-info',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_hdca_info", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e12ce323f35814ed571ccb6f09026daf43b68bdb61ba086feb70c10d1998f592", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_connections": {
        "code": "class GxadminSuite:\n    def time_query_history_connections(self):\n        query = \"\"\"\n            SELECT\n            h.id AS h_id,\n            h.update_time::DATE AS h_update,\n            jtod.job_id AS in_id,\n            j.tool_id AS in_tool,\n            j.tool_version AS in_tool_v,\n            jtid.job_id AS out_id,\n            j2.tool_id AS out_tool,\n            j2.tool_version AS out_ver\n            FROM\n            job AS j\n            LEFT JOIN history AS h ON j.history_id = h.id\n            LEFT JOIN job_to_output_dataset AS jtod ON j.id = jtod.job_id\n            LEFT JOIN job_to_input_dataset AS jtid ON jtod.dataset_id = jtid.dataset_id\n            LEFT JOIN job AS j2 ON jtid.job_id = j2.id\n            WHERE\n            jtid.job_id IS NOT NULL\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-connections',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_connections", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5272b40dfd53a4c8b5095cd1a80a6d68e58866cee48ea15bc358943fb4b8c996", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_contents": {
        "code": "class GxadminSuite:\n    def time_query_history_contents(self):\n        query = \"\"\"\n            select dataset_id, name, hid, visible, deleted, copied_from_history_dataset_association_id as copied_from from history_dataset_association where history_id = ;select collection_id, name, hid, visible, deleted, copied_from_history_dataset_collection_association_id as copied_from from history_dataset_collection_association where history_id = ;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-contents',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_contents", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "09ab3ef76c45c78ecb3f69ac1c385e5831635a61ea2a03d1ca12fa00d5afea89", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_system": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_system(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-system',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_system", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "afefcfbec094aa317176d7cc35ab97d0df59fd2d24fe2f000e7e74e5edf21e35", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_system_by_tool": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_system_by_tool(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-system-by-tool',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_system_by_tool", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "9070f2c784a29305046ac82b269bb6e6100b137af7350fc71485f553b393b4e6", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_wallclock": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_wallclock(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-wallclock',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_wallclock", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "437729169e02c4e287c593ab604f793db04120de78b98615237e031d058af3a7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_history": {
        "code": "class GxadminSuite:\n    def time_query_job_history(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-history',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_history", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "bf6e42b279570c70baae3d9260e7f583bc6fae8670bac54a393f19fc91aaf8af", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_info": {
        "code": "class GxadminSuite:\n    def time_query_job_info(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-info',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_info", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "0de2273bb2f81e77b5c741ae30f02c4e71ef6800670840b2a6da522564d3cc3f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_inputs": {
        "code": "class GxadminSuite:\n    def time_query_job_inputs(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-inputs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_inputs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "73e64e4474c5766a073c25b63e37c8a73044ba82346d9b63384364f9f42d67e3", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_outputs": {
        "code": "class GxadminSuite:\n    def time_query_job_outputs(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-outputs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_outputs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "50c4c511eae116c412c934da507ae5395d86c769075ac0c36fdee3673f8415a0", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_max_by_cpu_hours": {
        "code": "class GxadminSuite:\n    def time_query_jobs_max_by_cpu_hours(self):\n        query = \"\"\"\n            SELECT\n            job.id,\n            job.tool_id,\n            job.create_time,\n            metric_value/1000000000/3600/24 as cpu_days\n            FROM job, job_metric_numeric\n            WHERE\n            job.id = job_metric_numeric.job_id\n            AND metric_name = 'cpuacct.usage'\n            ORDER BY cpu_hours desc\n            LIMIT 30\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-max-by-cpu-hours',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_max_by_cpu_hours", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b7d3ccfe1788bcc8b7e4245d47cff563524f60409bd4ebc5aafb6c41cbcc953f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_nonterminal": {
        "code": "class GxadminSuite:\n    def time_query_jobs_nonterminal(self):\n        query = \"\"\"\n            SELECT\n            job.id, job.tool_id, job.state, job.create_time AT TIME ZONE 'UTC', job.job_runner_name, job.job_runner_external_id, job.handler, COALESCE(job.user_id::text, 'anon')\n            FROM\n            job\n            LEFT OUTER JOIN\n            galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            true AND job.state IN ('new', 'queued', 'running')\n            ORDER BY job.id ASC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-nonterminal',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_nonterminal", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2dc2a60d8ec424aef5600fee6de70334c46a052b76328a70e2a516d4fdfc005f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_per_user": {
        "code": "class GxadminSuite:\n    def time_query_jobs_per_user(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-per-user',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_per_user", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "374ec2283789ab834c00b8db89ecb4cf5d11a57e873b4424e9ec06d1437ff459", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_queued": {
        "code": "class GxadminSuite:\n    def time_query_jobs_queued(self):\n        query = \"\"\"\n            SELECT\n            CASE WHEN job_runner_external_id IS NOT null THEN 'processed' ELSE 'unprocessed' END as n,\n            count(*)\n            FROM\n            job\n            WHERE\n            state = 'queued'\n            GROUP BY n\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-queued',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_queued", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "77af875ebc82c8ff3606e22e17bf357d3c3c1c08fe93c557146006e8b9689c59", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_queued_internal_by_handler": {
        "code": "class GxadminSuite:\n    def time_query_jobs_queued_internal_by_handler(self):\n        query = \"\"\"\n            SELECT\n            handler,\n            count(handler)\n            FROM\n            job\n            WHERE\n            state = 'queued'\n            AND job_runner_external_id IS null\n            GROUP BY\n            handler\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-queued-internal-by-handler',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_queued_internal_by_handler", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a25735a89f7223f6a66c0e628e0c35bf01eacca6ab388c084b7ab24c4855350b", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_ready_to_run": {
        "code": "class GxadminSuite:\n    def time_query_jobs_ready_to_run(self):\n        query = \"\"\"\n            SELECT\n            EXISTS(\n            SELECT\n            history_dataset_association.id,\n            history_dataset_association.history_id,\n            history_dataset_association.dataset_id,\n            history_dataset_association.create_time,\n            history_dataset_association.update_time,\n            history_dataset_association.state,\n            history_dataset_association.copied_from_history_dataset_association_id,\n            history_dataset_association.copied_from_library_dataset_dataset_association_id,\n            history_dataset_association.name,\n            history_dataset_association.info,\n            history_dataset_association.blurb,\n            history_dataset_association.peek,\n            history_dataset_association.tool_version,\n            history_dataset_association.extension,\n            history_dataset_association.metadata,\n            history_dataset_association.parent_id,\n            history_dataset_association.designation,\n            history_dataset_association.deleted,\n            history_dataset_association.visible,\n            history_dataset_association.extended_metadata_id,\n            history_dataset_association.version,\n            history_dataset_association.hid,\n            history_dataset_association.purged,\n            history_dataset_association.hidden_beneath_collection_instance_id\n            FROM\n            history_dataset_association,\n            job_to_output_dataset\n            WHERE\n            job.id = job_to_output_dataset.job_id\n            AND history_dataset_association.id\n            = job_to_output_dataset.dataset_id\n            AND history_dataset_association.deleted = true\n            )\n            AS anon_1,\n            EXISTS(\n            SELECT\n            history_dataset_collection_association.id\n            FROM\n            history_dataset_collection_association,\n            job_to_output_dataset_collection\n            WHERE\n            job.id = job_to_output_dataset_collection.job_id\n            AND history_dataset_collection_association.id\n            = job_to_output_dataset_collection.dataset_collection_id\n            AND history_dataset_collection_association.deleted\n            = true\n            )\n            AS anon_2,\n            job.id AS job_id,\n            job.create_time AS job_create_time,\n            job.update_time AS job_update_time,\n            job.history_id AS job_history_id,\n            job.library_folder_id AS job_library_folder_id,\n            job.tool_id AS job_tool_id,\n            job.tool_version AS job_tool_version,\n            job.state AS job_state,\n            job.info AS job_info,\n            job.copied_from_job_id AS job_copied_from_job_id,\n            job.command_line AS job_command_line,\n            job.dependencies AS job_dependencies,\n            job.param_filename AS job_param_filename,\n            job.runner_name AS job_runner_name_1,\n            job.stdout AS job_stdout,\n            job.stderr AS job_stderr,\n            job.exit_code AS job_exit_code,\n            job.traceback AS job_traceback,\n            job.session_id AS job_session_id,\n            job.user_id AS job_user_id,\n            job.job_runner_name AS job_job_runner_name,\n            job.job_runner_external_id\n            AS job_job_runner_external_id,\n            job.destination_id AS job_destination_id,\n            job.destination_params AS job_destination_params,\n            job.object_store_id AS job_object_store_id,\n            job.imported AS job_imported,\n            job.params AS job_params,\n            job.handler AS job_handler\n            FROM\n            job\n            WHERE\n            job.state = 'new'\n            AND job.handler IS NULL\n            AND job.handler = 'handler0'\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-ready-to-run',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_ready_to_run", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "74e6e88733d2483eff23b8c3c2f1f97324e67071b52a53ab47a3461f64a44c09", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_largest_collection": {
        "code": "class GxadminSuite:\n    def time_query_largest_collection(self):\n        query = \"\"\"\n            WITH temp_table_collection_count AS (\n            SELECT count(*)\n            FROM dataset_collection_element\n            GROUP BY dataset_collection_id\n            ORDER BY count desc\n            )\n            select max(count) as count from temp_table_collection_count\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'largest-collection',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_largest_collection", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "1b95975daf62ad2ffe9a9edc07cd20295f2c72758745d97210499c21e9ab501d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_largest_histories": {
        "code": "class GxadminSuite:\n    def time_query_largest_histories(self):\n        query = \"\"\"\n            SELECT\n            sum(coalesce(dataset.total_size, dataset.file_size, 0)) as total_size,\n            history.id,\n            substring(history.name, 1, 10),\n            COALESCE(galaxy_user.username::text, '__UNKNOWN__')\n            FROM\n            dataset\n            JOIN history_dataset_association on dataset.id = history_dataset_association.dataset_id\n            JOIN history on history_dataset_association.history_id = history.id\n            JOIN galaxy_user on history.user_id = galaxy_user.id\n            GROUP BY history.id, history.name, history.user_id, galaxy_user.username\n            ORDER BY sum(coalesce(dataset.total_size, dataset.file_size, 0)) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'largest-histories',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_largest_histories", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3918890579f3d83380c4f9f09ca27cde07a43308568b77b03d25828024e263f4", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_latest_users": {
        "code": "class GxadminSuite:\n    def time_query_latest_users(self):\n        query = \"\"\"\n            SELECT\n            id,\n            create_time AT TIME ZONE 'UTC' as create_time,\n            pg_size_pretty(disk_usage) as disk_usage,\n            COALESCE(username::text, '__UNKNOWN__') as username,\n            COALESCE(email::text, '__UNKNOWN__') as email,\n            array_to_string(ARRAY(\n            select galaxy_group.name from galaxy_group where id in (\n            select group_id from user_group_association where user_group_association.user_id = galaxy_user.id\n            )\n            ), ' ') as groups,\n            active\n            FROM galaxy_user\n            ORDER BY create_time desc\n            LIMIT 40\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'latest-users',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_latest_users", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "587bb4f709bb516de00fa895eb8545b56ccf52303e81ee27e7ab8739e18d03fa", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_cpu_stats": {
        "code": "class GxadminSuite:\n    def time_query_monthly_cpu_stats(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', job.create_time  AT TIME ZONE 'UTC')::date as month,\n            round(sum((a.metric_value * b.metric_value) / 3600 / 24 / 365 ), 2) as cpu_years,\n            round(sum((a.metric_value * b.metric_value) / 3600 ), 2) as cpu_hours\n            FROM\n            job_metric_numeric a,\n            job_metric_numeric b,\n            job\n            WHERE\n            b.job_id = a.job_id\n            AND a.job_id = job.id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'galaxy_slots'\n    \n            GROUP BY month\n            ORDER BY month DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-cpu-stats',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_cpu_stats", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5e40033d4e7a08600a8f6a57e3fbeea9ebc773d12ab9bf0365a7a40be9392893", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_cpu_years": {
        "code": "class GxadminSuite:\n    def time_query_monthly_cpu_years(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', job.create_time)::date as month,\n            round(sum((a.metric_value * b.metric_value) / 3600 / 24 / 365), 2) as cpu_years\n            FROM\n            job_metric_numeric a,\n            job_metric_numeric b,\n            job\n            WHERE\n            b.job_id = a.job_id\n            AND a.job_id = job.id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'galaxy_slots'\n            GROUP BY date_trunc('month', job.create_time)\n            ORDER BY date_trunc('month', job.create_time) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-cpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_cpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a978a09cdbe041383762687032e324e2fc540afbf954befacf5ea8c3265035fc", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_data": {
        "code": "class GxadminSuite:\n    def time_query_monthly_data(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', dataset.create_time AT TIME ZONE 'UTC')::date AS month,\n            sum(coalesce(dataset.total_size, dataset.file_size, 0))\n            FROM\n            dataset\n    \n            GROUP BY\n            month\n            ORDER BY\n            month DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-data',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_data", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "74285badeb4aceceb70d71b0d31e9036871b2ae697a4b185e5b2866e935796d5", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_gpu_years": {
        "code": "class GxadminSuite:\n    def time_query_monthly_gpu_years(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', job.create_time)::date as month,\n            round(sum((a.metric_value * length(replace(b.metric_value, ',', ''))) / 3600 / 24 / 365), 2) as gpu_years\n            FROM\n            job_metric_numeric a,\n            job_metric_text b,\n            job\n            WHERE\n            b.job_id = a.job_id\n            AND a.job_id = job.id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            GROUP BY date_trunc('month', job.create_time)\n            ORDER BY date_trunc('month', job.create_time) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-gpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_gpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5623df1672cfdc770e317e5adf86e4a0e0bf521b1fe5e0b4e75491c585cd9d27", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_jobs": {
        "code": "class GxadminSuite:\n    def time_query_monthly_jobs(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', job.create_time AT TIME ZONE 'UTC')::DATE AS month,\n            count(*)\n            FROM\n            job\n    \n            GROUP BY\n            month\n            ORDER BY\n            month DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cefb222c63fc167a17c3768b2c9ebbc98e90db082ddc9c0d44fd2a4b4b7b3f03", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_users_active": {
        "code": "class GxadminSuite:\n    def time_query_monthly_users_active(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', job.create_time AT TIME ZONE 'UTC')::date as month,\n            count(distinct user_id) as active_users\n            FROM job\n    \n            GROUP BY month\n            ORDER BY month DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-users-active',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_users_active", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d33c6554cf55ec944b6b72ef66d44267e15311e62d0bbcac13dff7da17824b7d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_users_registered": {
        "code": "class GxadminSuite:\n    def time_query_monthly_users_registered(self):\n        query = \"\"\"\n            SELECT\n            date_trunc('month', galaxy_user.create_time)::DATE AS month,\n            count(*)\n            FROM\n            galaxy_user\n    \n            GROUP BY\n            month\n            ORDER BY\n            month DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-users-registered',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_users_registered", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "17b5410d7e88720e1fa3892aa3fa8eef245779a652f3adea7bbeb8d556ef5959", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_old_histories": {
        "code": "class GxadminSuite:\n    def time_query_old_histories(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'old-histories',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_old_histories", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "23486b69e5b6d6c196dc7808c05986a4b96c065139df35ce63a798cb0c9a14f8", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_cache_hit": {
        "code": "class GxadminSuite:\n    def time_query_pg_cache_hit(self):\n        query = \"\"\"\n            SELECT\n            sum(heap_blks_read) as heap_read,\n            sum(heap_blks_hit)  as heap_hit,\n            sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratio\n            FROM\n            pg_statio_user_tables\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-cache-hit',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_cache_hit", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "c704cbe04dc319017d95c9a1d1d95efb3d90e9bf76d518d5e25036b4de4e9d26", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_index_size": {
        "code": "class GxadminSuite:\n    def time_query_pg_index_size(self):\n        query = \"\"\"\n            SELECT\n            c.relname AS name,\n            sum(c.relpages::bigint*8192)::bigint AS size\n            FROM pg_class c\n            LEFT JOIN pg_namespace n ON (n.oid = c.relnamespace)\n            WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')\n            AND n.nspname !~ '^pg_toast'\n            AND c.relkind='i'\n            GROUP BY c.relname\n            ORDER BY sum(c.relpages) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-index-size',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_index_size", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "38ecdd618a5c335da15d2eb90da97e7d1a242a89581f010668e791ba075b9e1d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_index_usage": {
        "code": "class GxadminSuite:\n    def time_query_pg_index_usage(self):\n        query = \"\"\"\n            SELECT relname,\n            CASE COALESCE(idx_scan, 0)\n            WHEN 0 THEN -1\n            ELSE (100 * idx_scan / (seq_scan + idx_scan))\n            END percent_of_times_index_used,\n            n_live_tup rows_in_table\n             FROM\n            pg_stat_user_tables\n            ORDER BY\n            n_live_tup DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-index-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_index_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "0097fa169c0a1a922aa5b479ac00c4c1e167ce05ab047d0b7d0d7022555309b7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_long_running_queries": {
        "code": "class GxadminSuite:\n    def time_query_pg_long_running_queries(self):\n        query = \"\"\"\n            SELECT\n            pid,\n            now() - pg_stat_activity.query_start AS duration,\n            query AS query\n            FROM\n            pg_stat_activity\n            WHERE\n            pg_stat_activity.query <> ''::text\n            AND state <> 'idle'\n            AND now() - pg_stat_activity.query_start > interval '5 minutes'\n            ORDER BY\n            now() - pg_stat_activity.query_start DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-long-running-queries',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_long_running_queries", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "93bd4af18ba9ded2cf4d2fe5f0bbfee18f13e6ef7023f3d0927cdce8b9339d6e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_mandelbrot": {
        "code": "class GxadminSuite:\n    def time_query_pg_mandelbrot(self):\n        query = \"\"\"\n            WITH RECURSIVE Z(IX, IY, CX, CY, X, Y, I) AS (\n            SELECT IX, IY, X::float, Y::float, X::float, Y::float, 0\n            FROM (select -2.2 + 0.031 * i, i from generate_series(0,101) as i) as xgen(x,ix),\n             (select -1.5 + 0.031 * i, i from generate_series(0,101) as i) as ygen(y,iy)\n            UNION ALL\n            SELECT IX, IY, CX, CY, X * X - Y * Y + CX AS X, Y * X * 2 + CY, I + 1\n            FROM Z\n            WHERE X * X + Y * Y < 16::float\n            AND I < 100\n            )\n            SELECT array_to_string(array_agg(SUBSTRING(' .,,,-----++++%%%%@@@@#### ', LEAST(GREATEST(I,1),27), 1)),'')\n            FROM (\n            SELECT IX, IY, MAX(I) AS I\n            FROM Z\n            GROUP BY IY, IX\n            ORDER BY IY, IX\n             ) AS ZT\n            GROUP BY IY\n            ORDER BY IY\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-mandelbrot',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_mandelbrot", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "732698964c06a30cb9199803d380aba5996fe4453bfd3ff1c2169de42bbab7a2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_stat_bgwriter": {
        "code": "class GxadminSuite:\n    def time_query_pg_stat_bgwriter(self):\n        query = \"\"\"\n            SELECT\n            checkpoints_timed,\n            checkpoints_req,\n            checkpoint_write_time,\n            checkpoint_sync_time,\n            buffers_checkpoint,\n            buffers_clean,\n            maxwritten_clean,\n            buffers_backend,\n            buffers_backend_fsync,\n            buffers_alloc\n            FROM\n            pg_stat_bgwriter\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-stat-bgwriter',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_stat_bgwriter", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ea43639413990aa0180fcf11aa3f73cf6c0d8ed158369e695694f6fe0841b7b1", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_stat_user_tables": {
        "code": "class GxadminSuite:\n    def time_query_pg_stat_user_tables(self):\n        query = \"\"\"\n            SELECT\n            schemaname,\n            relname,\n            seq_scan,\n            seq_tup_read,\n            COALESCE(idx_scan, 0),\n            COALESCE(idx_tup_fetch, 0),\n            n_tup_ins,\n            n_tup_upd,\n            n_tup_del,\n            n_tup_hot_upd,\n            n_live_tup,\n            n_dead_tup,\n            vacuum_count,\n            autovacuum_count,\n            analyze_count,\n            autoanalyze_count\n            FROM\n            pg_stat_user_tables\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-stat-user-tables',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_stat_user_tables", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "51b2d9d66b9526f69d332bc6979916b6db876d73efe57dd0829e6b457039de99", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_table_bloat": {
        "code": "class GxadminSuite:\n    def time_query_pg_table_bloat(self):\n        query = \"\"\"\n            WITH constants AS (\n            SELECT current_setting('block_size')::numeric AS bs, 23 AS hdr, 4 AS ma\n            ), bloat_info AS (\n            SELECT\n            ma,bs,schemaname,tablename,\n            (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr,\n            (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2\n            FROM (\n            SELECT\n            schemaname, tablename, hdr, ma, bs,\n            SUM((1-null_frac)*avg_width) AS datawidth,\n            MAX(null_frac) AS maxfracsum,\n            hdr+(\n            SELECT 1+count(*)/8\n            FROM pg_stats s2\n            WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename\n            ) AS nullhdr\n            FROM pg_stats s, constants\n            GROUP BY 1,2,3,4,5\n            ) AS foo\n            ), table_bloat AS (\n            SELECT\n            schemaname, tablename, cc.relpages, bs,\n            CEIL((cc.reltuples*((datahdr+ma-\n            (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)) AS otta\n            FROM bloat_info\n            JOIN pg_class cc ON cc.relname = bloat_info.tablename\n            JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = bloat_info.schemaname AND nn.nspname <> 'information_schema'\n            ), index_bloat AS (\n            SELECT\n            schemaname, tablename, bs,\n            coalesce(c2.relname,'?') AS iname, COALESCE(c2.reltuples,0) AS ituples, c2.relpages,0 AS ipages,\n            COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta -- very rough approximation, assumes all cols\n            FROM bloat_info\n            JOIN pg_class cc ON cc.relname = bloat_info.tablename\n            JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = bloat_info.schemaname AND nn.nspname <> 'information_schema'\n            JOIN pg_index i ON indrelid = cc.oid\n            JOIN pg_class c2 ON c2.oid = i.indexrelid\n            )\n            SELECT\n            type, schemaname, object_name, bloat, raw_waste as waste\n            FROM\n            (SELECT\n            'table' as type,\n            schemaname,\n            tablename as object_name,\n            ROUND(CASE WHEN otta=0 THEN 0.0 ELSE table_bloat.relpages/otta::numeric END,1) AS bloat,\n            CASE WHEN relpages < otta THEN '0' ELSE (bs*(table_bloat.relpages-otta)::bigint)::bigint END AS raw_waste\n            FROM\n            table_bloat\n            UNION\n            SELECT\n            'index' as type,\n            schemaname,\n            tablename || '::' || iname as object_name,\n            ROUND(CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages/iotta::numeric END,1) AS bloat,\n            CASE WHEN ipages < iotta THEN '0' ELSE (bs*(ipages-iotta))::bigint END AS raw_waste\n            FROM\n            index_bloat) bloat_summary\n            ORDER BY raw_waste DESC, bloat DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-table-bloat',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_table_bloat", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b18f5a156e0a0377a9bdc68a39b5518a250b9c19417b854301299b164de20e47", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_table_size": {
        "code": "class GxadminSuite:\n    def time_query_pg_table_size(self):\n        query = \"\"\"\n            SELECT\n            c.relname AS name,\n            pg_table_size(c.oid) AS size,\n            pg_indexes_size(c.oid) AS index_size\n            FROM pg_class c\n            LEFT JOIN pg_namespace n ON (n.oid = c.relnamespace)\n            WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')\n            AND n.nspname !~ '^pg_toast'\n            AND c.relkind='r'\n            ORDER BY pg_table_size(c.oid) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-table-size',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_table_size", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "510beaf4cb5036154a5f3d8cfc847780e485bcf791ce6c77036f51ad56cb942d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_unused_indexes": {
        "code": "class GxadminSuite:\n    def time_query_pg_unused_indexes(self):\n        query = \"\"\"\n            SELECT\n            schemaname || '.' || relname AS table,\n            indexrelname AS index,\n            pg_relation_size(i.indexrelid) AS index_size,\n            COALESCE(idx_scan, 0) as index_scans\n            FROM pg_stat_user_indexes ui\n            JOIN pg_index i ON ui.indexrelid = i.indexrelid\n            WHERE NOT indisunique AND idx_scan < 50 AND pg_relation_size(relid) > 5 * 8192\n            ORDER BY\n            pg_relation_size(i.indexrelid) / nullif(idx_scan, 0) DESC NULLS FIRST,\n            pg_relation_size(i.indexrelid) DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-unused-indexes',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_unused_indexes", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cec654f9aae704f08a36c3ddf3b8f1ae8027edce6398026d575b65ea7005dfcb", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_vacuum_stats": {
        "code": "class GxadminSuite:\n    def time_query_pg_vacuum_stats(self):\n        query = \"\"\"\n            WITH table_opts AS (\n            SELECT\n            pg_class.oid, relname, nspname, array_to_string(reloptions, '') AS relopts\n            FROM\n             pg_class INNER JOIN pg_namespace ns ON relnamespace = ns.oid\n            ), vacuum_settings AS (\n            SELECT\n            oid, relname, nspname,\n            CASE\n            WHEN relopts LIKE '%autovacuum_vacuum_threshold%'\n            THEN substring(relopts, '.*autovacuum_vacuum_threshold=([0-9.]+).*')::integer\n            ELSE current_setting('autovacuum_vacuum_threshold')::integer\n            END AS autovacuum_vacuum_threshold,\n            CASE\n            WHEN relopts LIKE '%autovacuum_vacuum_scale_factor%'\n            THEN substring(relopts, '.*autovacuum_vacuum_scale_factor=([0-9.]+).*')::real\n            ELSE current_setting('autovacuum_vacuum_scale_factor')::real\n            END AS autovacuum_vacuum_scale_factor\n            FROM\n            table_opts\n            )\n            SELECT\n            vacuum_settings.nspname AS schema,\n            vacuum_settings.relname AS table,\n            to_char(psut.last_vacuum, 'YYYY-MM-DD HH24:MI') AS last_vacuum,\n            to_char(psut.last_autovacuum, 'YYYY-MM-DD HH24:MI') AS last_autovacuum,\n            to_char(pg_class.reltuples, '9G999G999G999') AS rowcount,\n            to_char(psut.n_dead_tup, '9G999G999G999') AS dead_rowcount,\n            to_char(autovacuum_vacuum_threshold\n             + (autovacuum_vacuum_scale_factor::numeric * pg_class.reltuples), '9G999G999G999') AS autovacuum_threshold,\n            CASE\n            WHEN autovacuum_vacuum_threshold + (autovacuum_vacuum_scale_factor::numeric * pg_class.reltuples) < psut.n_dead_tup\n            THEN 'yes'\n            END AS expect_autovacuum\n            FROM\n            pg_stat_user_tables psut INNER JOIN pg_class ON psut.relid = pg_class.oid\n            INNER JOIN vacuum_settings ON pg_class.oid = vacuum_settings.oid\n            ORDER BY 1\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-vacuum-stats',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_vacuum_stats", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5d890f777590491e57651e4694e6a1bfae0ca86815a0e7a08707781a1f6b7b88", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue": {
        "code": "class GxadminSuite:\n    def time_query_queue(self):\n        query = \"\"\"\n            SELECT\n            tool_id, state, count(tool_id) as tool_count\n            FROM\n            job\n            WHERE\n            state in ('queued', 'running')\n            GROUP BY\n            tool_id, state\n            ORDER BY\n            tool_count desc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a340cee61e785a9b650e67b818e5e7dd1016e9abeb3c6f2c70516fb1c8f98f22", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_detail": {
        "code": "class GxadminSuite:\n    def time_query_queue_detail(self):\n        query = \"\"\"\n            SELECT\n            job.state,\n            job.id,\n            job.job_runner_external_id as extid,\n            job.tool_id,\n            COALESCE(galaxy_user.username::text, 'Anonymous User'),\n            ( now() AT TIME ZONE 'UTC' - job.create_time) as time_since_creation,\n            job.handler,\n            job.job_runner_name,\n            job.destination_id\n            FROM job\n            FULL OUTER JOIN galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            state in ('running', 'queued')\n            ORDER BY\n            state desc,\n            time_since_creation desc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-detail',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_detail", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2b1a2afb88cf4053ffc222e7a428b56ca543cfcc7fd338c25ab8e0474f0658f7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_detail_by_handler": {
        "code": "class GxadminSuite:\n    def time_query_queue_detail_by_handler(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-detail-by-handler',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_detail_by_handler", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3bb657163fb9aa66ae69c7a1bbb21240894be33ddaa4ae11b0c1e45f05f0ac67", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_overview": {
        "code": "class GxadminSuite:\n    def time_query_queue_overview(self):\n        query = \"\"\"\n            WITH queue AS (\n            SELECT\n            regexp_replace(tool_id, '/[0-9.a-z+-]+$', '')::TEXT AS tool_id,\n            tool_version::TEXT,\n            COALESCE(destination_id, 'unknown')::TEXT AS destination_id,\n            COALESCE(handler, 'unknown')::TEXT AS handler,\n            state::TEXT,\n            COALESCE(job_runner_name, 'unknown')::TEXT AS job_runner_name,\n            count(*) AS count,\n            user_id::TEXT AS user_id\n            FROM\n            job\n            WHERE\n            state = 'running' OR state = 'queued' OR state = 'new'\n            GROUP BY\n            tool_id, tool_version, destination_id, handler, state, job_runner_name, user_id\n            )\n            SELECT\n            tool_id, tool_version, destination_id, handler, state, job_runner_name, sum(count), user_id\n            FROM\n            queue\n            GROUP BY\n            tool_id, tool_version, destination_id, handler, state, job_runner_name, user_id\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-overview',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_overview", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b3012f4c7c64962a5ad4c72757d5d983b851a2cd6298daf0b695f045ab6f0c42", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_time": {
        "code": "class GxadminSuite:\n    def time_query_queue_time(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-time',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_time", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5effa376290a9232684d800323d313b40efa5f384e8d30832db4c5f88c75fcd6", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_recent_jobs": {
        "code": "class GxadminSuite:\n    def time_query_recent_jobs(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'recent-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_recent_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5b7667bc5cb8402cb9d667b8dda65a2325c265866b07ba8f5abc517fabb710f4", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_runtime_per_user": {
        "code": "class GxadminSuite:\n    def time_query_runtime_per_user(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'runtime-per-user',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_runtime_per_user", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "15ca4e044f156c50233bc55b862fa23a9b6e31b4a1eeaa0f674a28a3135b20ed", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_available_metrics": {
        "code": "class GxadminSuite:\n    def time_query_tool_available_metrics(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-available-metrics',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_available_metrics", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "8f2d148a180f56c5a70992fb2cc444bd43bcda8ff6292612f7428b31c3beb96e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_errors": {
        "code": "class GxadminSuite:\n    def time_query_tool_errors(self):\n        query = \"\"\"\n            SELECT\n            j.tool_id,\n            count(*) AS tool_runs,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END)::float / count(*) AS percent_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)::float / count(*) AS percent_failed,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END) AS count_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END) AS count_failed,\n            j.handler\n            FROM\n            job AS j\n            WHERE\n            j.create_time > (now() - '4 weeks'::INTERVAL)\n            GROUP BY\n            j.tool_id, j.handler\n            HAVING\n            sum(CASE WHEN j.state IN ('error', 'failed') THEN 1 ELSE 0 END) * 100.0 / count(*) > 10.0\n            ORDER BY\n            tool_runs DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-errors',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_errors", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cf0af93f0ee0df6fdf6bfd257bddf89b9a2cd0d8ce86221ce573c4361deb7ff9", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_last_used_date": {
        "code": "class GxadminSuite:\n    def time_query_tool_last_used_date(self):\n        query = \"\"\"\n            select max(date_trunc('month', create_time AT TIME ZONE 'UTC')), tool_id from job group by tool_id order by max desc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-last-used-date',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_last_used_date", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "bb2b7692b90a7e859dbc0f78af3b553b70cfccdfe7f6d105d9ffffde1c7f56ce", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_likely_broken": {
        "code": "class GxadminSuite:\n    def time_query_tool_likely_broken(self):\n        query = \"\"\"\n            SELECT\n            j.tool_id,\n            count(*) AS tool_runs,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END)::float / count(*) AS percent_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)::float / count(*) AS percent_failed,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END) AS count_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END) AS count_failed,\n            j.handler\n            FROM\n            job AS j\n            WHERE\n            j.create_time > (now() - '4 weeks'::INTERVAL)\n            GROUP BY\n            j.tool_id, j.handler\n            HAVING\n            sum(CASE WHEN j.state IN ('error', 'failed') THEN 1 ELSE 0 END) * 100.0 / count(*) > 95.0\n            AND count(*) > 4\n            ORDER BY\n            tool_runs DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-likely-broken',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_likely_broken", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "65c8c92acb1840900f5a94334790a9edf7439455d9432a88875d81358a7c1627", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_metrics": {
        "code": "class GxadminSuite:\n    def time_query_tool_metrics(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-metrics',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_metrics", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "dd5cb48710c23711bc957d8a6470323fdb26fdded62f9221b4a70c7c0d703f36", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_new_errors": {
        "code": "class GxadminSuite:\n    def time_query_tool_new_errors(self):\n        query = \"\"\"\n            SELECT\n            j.tool_id,\n            count(*) AS tool_runs,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END)::float / count(*) AS percent_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)::float / count(*) AS percent_failed,\n            sum(CASE WHEN j.state = 'error'  THEN 1 ELSE 0 END) AS count_errored,\n            sum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END) AS count_failed,\n            j.handler\n            FROM job AS j\n            WHERE\n            j.tool_id\n            IN (\n            SELECT tool_id\n            FROM job AS j\n            WHERE j.create_time > (now() - '4 weeks'::INTERVAL)\n            GROUP BY j.tool_id\n            )\n            GROUP BY j.tool_id, j.handler\n            ORDER BY percent_failed_errored DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-new-errors',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_new_errors", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "8b80c4011f88eecae24225b434d86872fd4be4c16a6e8015d0523d1a9f36eada", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_popularity": {
        "code": "class GxadminSuite:\n    def time_query_tool_popularity(self):\n        query = \"\"\"\n            SELECT\n            tool_id,\n            date_trunc('month', create_time AT TIME ZONE 'UTC')::date as month,\n            count(*)\n            FROM job\n            WHERE create_time > (now() AT TIME ZONE 'UTC' - '24 months'::interval)\n            GROUP BY tool_id, month\n            ORDER BY month desc, count desc\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-popularity',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_popularity", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cd673f085d23293b1373d86dbd99de3ff5ceb314eab5f44a833055de5ef9b69c", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_usage": {
        "code": "class GxadminSuite:\n    def time_query_tool_usage(self):\n        query = \"\"\"\n            SELECT\n            j.tool_id, count(*) AS count\n            FROM job j\n    \n            GROUP BY j.tool_id\n            ORDER BY count DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d37faba7465653f14ba9857f5c008fe55395f3c8c6b53e3f61e8cace774d2c45", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_total_jobs": {
        "code": "class GxadminSuite:\n    def time_query_total_jobs(self):\n        query = \"\"\"\n            SELECT\n            state, count(*)\n            FROM\n            job\n    \n            GROUP BY\n            state\n            ORDER BY\n            state\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'total-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_total_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e1713b1537064e633efb4dddbc7d51f769800a200451b2437aa019de01b3886a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_list": {
        "code": "class GxadminSuite:\n    def time_query_training_list(self):\n        query = \"\"\"\n            SELECT\n            substring(name from 10) as name,\n            date_trunc('day', create_time AT TIME ZONE 'UTC')::date as created\n    \n            FROM galaxy_group\n            WHERE name like 'training-%' AND deleted = false\n            ORDER BY create_time DESC\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "38c5a9cd26d0ca1583ccc2ad314b3e43907798142534d4a39223d4031e55ba1c", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_members": {
        "code": "class GxadminSuite:\n    def time_query_training_members(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-members',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_members", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cf5205a7805c96b3a914279a46b581cd34f42fc48e5b16f37acde42b288afade", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_members_remove": {
        "code": "class GxadminSuite:\n    def time_query_training_members_remove(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-members-remove',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_members_remove", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "8499fa1d0ed45238edda77c618b3ab9addb8822ff2b57dd5dfee343353768e15", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_queue": {
        "code": "class GxadminSuite:\n    def time_query_training_queue(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-queue',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_queue", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ba6d7feabb5314c357ad3184d4338614a5e344fa2678d454032b814e4b6cc709", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_ts_repos": {
        "code": "class GxadminSuite:\n    def time_query_ts_repos(self):\n        query = \"\"\"\n            SELECT\n            tool_shed, owner, count(*)\n            FROM\n            tool_shed_repository\n            GROUP BY\n            tool_shed, owner\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'ts-repos',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_ts_repos", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ffe0fb3e6422336c4d6dde8dcce6c6020279d6dabc063063a9ba99444b90c3a7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_upload_gb_in_past_hour": {
        "code": "class GxadminSuite:\n    def time_query_upload_gb_in_past_hour(self):\n        query = \"\"\"\n            SELECT\n            coalesce(sum(coalesce(dataset.total_size, coalesce(dataset.file_size, 0))), 0),\n            1 as hours\n            FROM\n            job\n            LEFT JOIN job_to_output_dataset ON job.id = job_to_output_dataset.job_id\n            LEFT JOIN history_dataset_association ON\n            job_to_output_dataset.dataset_id = history_dataset_association.id\n            LEFT JOIN dataset ON history_dataset_association.dataset_id = dataset.id\n            WHERE\n            job.tool_id = 'upload1'\n            AND job.create_time AT TIME ZONE 'UTC' > (now() - '1 hours'::INTERVAL)\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'upload-gb-in-past-hour',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_upload_gb_in_past_hour", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "bb4e682322a97952e83a201df0fa598d828b294c998038ef1c8aeda6421c5365", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_cpu_years": {
        "code": "class GxadminSuite:\n    def time_query_user_cpu_years(self):\n        query = \"\"\"\n            SELECT\n            row_number() OVER (ORDER BY round(sum((a.metric_value * b.metric_value) / 3600 / 24 / 365), 2) DESC) as rank,\n            job.user_id,\n            COALESCE(galaxy_user.username::text, 'Anonymous'),\n            round(sum((a.metric_value * b.metric_value) / 3600 / 24 / 365), 2) as cpu_years\n            FROM\n            job_metric_numeric a,\n            job_metric_numeric b,\n            job\n            FULL OUTER JOIN galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            b.job_id = a.job_id\n            AND a.job_id = job.id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'galaxy_slots'\n            GROUP BY job.user_id, galaxy_user.username\n            ORDER BY round(sum((a.metric_value * b.metric_value) / 3600 / 24 / 365), 2) DESC\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-cpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_cpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "6af696a15de72f8911fd71cd230864b562dd374c65c1312c61d5320472c203bf", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_disk_quota": {
        "code": "class GxadminSuite:\n    def time_query_user_disk_quota(self):\n        query = \"\"\"\n            WITH user_basequota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            basequota.bytes as \"quota\"\n            FROM galaxy_user,\n            quota basequota,\n            user_quota_association\n            WHERE galaxy_user.id = user_quota_association.user_id\n            AND basequota.id = user_quota_association.quota_id\n            AND basequota.operation = '='\n            AND NOT basequota.deleted\n            GROUP BY galaxy_user.id, basequota.bytes\n            ),\n            user_basequota AS (\n            SELECT user_basequota_list.user_id,\n            MAX(user_basequota_list.quota) as \"quota\"\n            FROM user_basequota_list\n            GROUP BY user_basequota_list.user_id\n            ),\n            user_addquota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            addquota.bytes as \"quota\"\n            FROM galaxy_user,\n            quota addquota,\n            user_quota_association\n            WHERE galaxy_user.id = user_quota_association.user_id\n            AND addquota.id = user_quota_association.quota_id\n            AND addquota.operation = '+'\n            AND NOT addquota.deleted\n            GROUP BY galaxy_user.id, addquota.bytes\n            ),\n            user_addquota AS (\n            SELECT user_addquota_list.user_id,\n            sum(user_addquota_list.quota) AS \"quota\"\n            FROM user_addquota_list\n            GROUP BY user_addquota_list.user_id\n            ),\n            user_minquota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            minquota.bytes as \"quota\"\n            FROM galaxy_user,\n            quota minquota,\n            user_quota_association\n            WHERE galaxy_user.id = user_quota_association.user_id\n            AND minquota.id = user_quota_association.quota_id\n            AND minquota.operation = '-'\n            AND NOT minquota.deleted\n            GROUP BY galaxy_user.id, minquota.bytes\n            ),\n            user_minquota AS (\n            SELECT user_minquota_list.user_id,\n            sum(user_minquota_list.quota) AS \"quota\"\n            FROM user_minquota_list\n            GROUP BY user_minquota_list.user_id\n            ),\n            group_basequota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            galaxy_group.id as \"group_id\",\n            basequota.bytes as \"quota\"\n            FROM galaxy_user,\n            galaxy_group,\n            quota basequota,\n            group_quota_association,\n            user_group_association\n            WHERE galaxy_user.id = user_group_association.user_id\n            AND galaxy_group.id = user_group_association.group_id\n            AND basequota.id = group_quota_association.quota_id\n            AND galaxy_group.id = group_quota_association.group_id\n            AND basequota.operation = '='\n            AND NOT basequota.deleted\n            GROUP BY galaxy_user.id, galaxy_group.id, basequota.bytes\n            ),\n            group_basequota AS (\n            SELECT group_basequota_list.user_id,\n            group_basequota_list.group_id,\n            MAX(group_basequota_list.quota) as \"quota\"\n            FROM group_basequota_list\n            GROUP BY group_basequota_list.user_id, group_basequota_list.group_id\n            ),\n            group_addquota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            addquota.bytes as \"quota\"\n            FROM galaxy_user,\n            galaxy_group,\n            quota addquota,\n            group_quota_association,\n            user_group_association\n            WHERE galaxy_user.id = user_group_association.user_id\n            AND galaxy_group.id = user_group_association.group_id\n            AND addquota.id = group_quota_association.quota_id\n            AND galaxy_group.id = group_quota_association.group_id\n            AND addquota.operation = '+'\n            AND NOT addquota.deleted\n            GROUP BY galaxy_user.id, addquota.bytes\n            ),\n            group_addquota AS (\n            SELECT group_addquota_list.user_id,\n            sum(group_addquota_list.quota) AS \"quota\"\n            FROM group_addquota_list\n            GROUP BY group_addquota_list.user_id\n            ),\n            group_minquota_list AS (\n            SELECT galaxy_user.id as \"user_id\",\n            minquota.bytes as \"quota\"\n            FROM galaxy_user,\n            galaxy_group,\n            quota minquota,\n            group_quota_association,\n            user_group_association\n            WHERE galaxy_user.id = user_group_association.user_id\n            AND galaxy_group.id = user_group_association.group_id\n            AND minquota.id = group_quota_association.quota_id\n            AND galaxy_group.id = group_quota_association.group_id\n            AND minquota.operation = '-'\n            AND NOT minquota.deleted\n            GROUP BY galaxy_user.id, galaxy_group.id, galaxy_group.name, minquota.bytes\n            ),\n            group_minquota AS (\n            SELECT group_minquota_list.user_id,\n            sum(group_minquota_list.quota) AS \"quota\"\n            FROM group_minquota_list\n            GROUP BY group_minquota_list.user_id\n            ),\n            all_user_default_quota AS (\n            SELECT galaxy_user.id as \"user_id\",\n            quota.bytes\n            FROM galaxy_user,\n            quota\n            WHERE quota.id = (SELECT quota_id FROM default_quota_association)\n            ),\n            quotas AS (\n            SELECT all_user_default_quota.user_id as \"aud_uid\",\n            all_user_default_quota.bytes as \"aud_quota\",\n            user_basequota.user_id as \"ubq_uid\",\n            user_basequota.quota as \"ubq_quota\",\n            user_addquota.user_id as \"uaq_uid\",\n            user_addquota.quota as \"uaq_quota\",\n            user_minquota.user_id as \"umq_uid\",\n            user_minquota.quota as \"umq_quota\",\n            group_basequota.user_id as \"gbq_uid\",\n            group_basequota.quota as \"gbq_quota\",\n            group_addquota.user_id as \"gaq_uid\",\n            group_addquota.quota as \"gaq_quota\",\n            group_minquota.user_id as \"gmq_uid\",\n            group_minquota.quota as \"gmq_quota\"\n            FROM all_user_default_quota\n            FULL OUTER JOIN user_basequota ON all_user_default_quota.user_id = user_basequota.user_id\n            FULL OUTER JOIN user_addquota ON all_user_default_quota.user_id = user_addquota.user_id\n            FULL OUTER JOIN user_minquota ON all_user_default_quota.user_id = user_minquota.user_id\n            FULL OUTER JOIN group_basequota ON all_user_default_quota.user_id = group_basequota.user_id\n            FULL OUTER JOIN group_addquota ON all_user_default_quota.user_id = group_addquota.user_id\n            FULL OUTER JOIN group_minquota ON all_user_default_quota.user_id = group_minquota.user_id\n            ),\n            computed_quotas AS (\n            SELECT aud_uid as \"user_id\",\n            COALESCE(GREATEST(ubq_quota, gbq_quota), aud_quota) as \"base_quota\",\n            (COALESCE(uaq_quota, 0) + COALESCE(gaq_quota, 0)) as \"add_quota\",\n            (COALESCE(umq_quota, 0) + COALESCE(gmq_quota, 0)) as \"min_quota\"\n            FROM quotas\n            )\n    \n            SELECT row_number() OVER (ORDER BY (computed_quotas.base_quota + computed_quotas.add_quota - computed_quotas.min_quota) DESC) as rank,\n            galaxy_user.id as \"user_id\",\n            COALESCE(galaxy_user.username::text, 'Anonymous'),\n            pg_size_pretty(computed_quotas.base_quota + computed_quotas.add_quota - computed_quotas.min_quota) as \"quota\"\n            FROM computed_quotas,\n            galaxy_user\n            WHERE computed_quotas.user_id = galaxy_user.id\n            GROUP BY galaxy_user.id, galaxy_user.username, computed_quotas.base_quota, computed_quotas.add_quota, computed_quotas.min_quota\n            ORDER BY (computed_quotas.base_quota + computed_quotas.add_quota - computed_quotas.min_quota) DESC\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-disk-quota',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_disk_quota", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "9ec0c2c26f531261c26de46669707b1b503c8817d45b54d91564cea4a9654a4d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_disk_usage": {
        "code": "class GxadminSuite:\n    def time_query_user_disk_usage(self):\n        query = \"\"\"\n            SELECT\n            row_number() OVER (ORDER BY sum(coalesce(dataset.total_size, dataset.file_size, 0)) DESC) as rank,\n            galaxy_user.id as \"user id\",\n            COALESCE(galaxy_user.username::text, 'Anonymous'),\n            COALESCE(galaxy_user.email::text, 'Anonymous'),\n            sum(coalesce(dataset.total_size, dataset.file_size, 0)) as \"storage usage\"\n            FROM\n            dataset,\n            galaxy_user,\n            history_dataset_association,\n            history\n            WHERE\n            NOT dataset.purged\n            AND dataset.id = history_dataset_association.dataset_id\n            AND history_dataset_association.history_id = history.id\n            AND history.user_id = galaxy_user.id\n            GROUP BY galaxy_user.id\n            ORDER BY 1\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-disk-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_disk_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "4f701f3b55ad5be2176aec88c6e5b598c50f9e79ba29b1dcdf45201d83bd4a8d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_gpu_years": {
        "code": "class GxadminSuite:\n    def time_query_user_gpu_years(self):\n        query = \"\"\"\n            SELECT\n            row_number() OVER (ORDER BY round(sum((a.metric_value * length(replace(b.metric_value, ',', ''))) / 3600 / 24 / 365), 2) DESC) as rank,\n            job.user_id,\n            COALESCE(galaxy_user.username::text, 'Anonymous'),\n            round(sum((a.metric_value * length(replace(b.metric_value, ',', ''))) / 3600 / 24 / 365), 2) as gpu_years\n            FROM\n            job_metric_numeric a,\n            job_metric_text b,\n            job\n            FULL OUTER JOIN galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            b.job_id = a.job_id\n            AND a.job_id = job.id\n            AND a.metric_name = 'runtime_seconds'\n            AND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            GROUP BY job.user_id, galaxy_user.username\n            ORDER BY round(sum((a.metric_value * length(replace(b.metric_value, ',', ''))) / 3600 / 24 / 365), 2) DESC\n            LIMIT 50\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-gpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_gpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "4de3c0f806336d323925cfdd7f033a9d048330d34a37c86e01e12cf1d1231a31", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_history_list": {
        "code": "class GxadminSuite:\n    def time_query_user_history_list(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-history-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_history_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "4290960c1dbbe01df4571a32787ec5bc5d8a8d8d8d0057063998e1b781d55c60", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_recent_aggregate_jobs": {
        "code": "class GxadminSuite:\n    def time_query_user_recent_aggregate_jobs(self):\n        query = \"\"\"\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-recent-aggregate-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_recent_aggregate_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ed219d8f2de04f3c7d863eaedf8817b4e625396109dfe69351a257c1f1e8b0e1", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_count": {
        "code": "class GxadminSuite:\n    def time_query_users_count(self):\n        query = \"\"\"\n            SELECT\n            active, external, deleted, purged, count(*) as count\n            FROM\n            galaxy_user\n            GROUP BY\n            active, external, deleted, purged\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-count',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_count", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2e82a64a6f5d659b5fe52586b453675c67f8c8614ef40ff238d0b36a32f01c0e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_total": {
        "code": "class GxadminSuite:\n    def time_query_users_total(self):\n        query = \"\"\"\n            SELECT count(*) FROM galaxy_user\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-total',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_total", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cb2b86e9045eb0e88b89571482578e7310ad6a32067fa3140b7b2f2578569ec2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_with_oidc": {
        "code": "class GxadminSuite:\n    def time_query_users_with_oidc(self):\n        query = \"\"\"\n            SELECT provider, count(distinct user_id) FROM oidc_user_authnz_tokens GROUP BY provider\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-with-oidc',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_with_oidc", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "1dffa89434623296ade9fd9b19800a9fb9055f858365c8b64626c365d8d75d22", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workers": {
        "code": "class GxadminSuite:\n    def time_query_workers(self):\n        query = \"\"\"\n            SELECT\n            server_name,\n            hostname,\n            pid\n            FROM\n            worker_process\n            WHERE\n            pid IS NOT NULL\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workers',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workers", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "27eab942c09b651758ed88260c818b9c15dc2fbe13f4905158047cb8476e7ce7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_connections": {
        "code": "class GxadminSuite:\n    def time_query_workflow_connections(self):\n        query = \"\"\"\n            SELECT\n            workflow.id as wf_id,\n            workflow.update_time::DATE as wf_updated,\n            ws_in.id as in_id,\n            ws_in.tool_id as in_tool,\n            ws_in.tool_version as in_tool_v,\n            ws_out.id as out_id,\n            ws_out.tool_id as out_tool,\n            ws_out.tool_version as out_tool_v,\n            sw.published as published,\n            sw.deleted as deleted,\n            workflow.has_errors as has_errors\n            FROM workflow_step_connection wfc\n            LEFT JOIN workflow_step ws_in ON ws_in.id = wfc.output_step_id\n            LEFT JOIN workflow_step_input wsi ON wfc.input_step_input_id = wsi.id\n            LEFT JOIN workflow_step ws_out ON ws_out.id = wsi.workflow_step_id\n            LEFT JOIN workflow_output as wo ON wsi.workflow_step_id = wfc.output_step_id\n            LEFT JOIN workflow on ws_in.workflow_id = workflow.id\n            LEFT JOIN stored_workflow as sw on sw.latest_workflow_id = workflow.id\n            WHERE\n            workflow.id in (\n            SELECT\n             workflow.id\n            FROM\n             stored_workflow\n            LEFT JOIN\n             workflow on stored_workflow.latest_workflow_id = workflow.id\n            )\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-connections',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_connections", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "31e6f12dd22d8569f188644df9c6a356f543d3f2feed64210e0b359c5a2b11b2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_invocation_status": {
        "code": "class GxadminSuite:\n    def time_query_workflow_invocation_status(self):\n        query = \"\"\"\n            SELECT\n            COALESCE(scheduler, 'none'),\n            COALESCE(handler, 'none'),\n            state,\n            count(*)\n            FROM\n            workflow_invocation\n            WHERE state in ('new', 'ready')\n            GROUP BY handler, scheduler, state\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-invocation-status',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_invocation_status", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ae97ee7ece8bc16d4be1089f51a9434e0dce05f655568845d653b7d67e2649af", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_invocation_totals": {
        "code": "class GxadminSuite:\n    def time_query_workflow_invocation_totals(self):\n        query = \"\"\"\n            SELECT\n            COALESCE(state, 'unknown'), count(*)\n            FROM\n            workflow_invocation\n            GROUP BY state\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-invocation-totals',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_invocation_totals", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "be026347e1f9f0c7681c210386de9ad3f617b44f41ca8b95fbe5c40a9c28a677", 
        "warmup_time": -1
    }, 
    "version": 2
}