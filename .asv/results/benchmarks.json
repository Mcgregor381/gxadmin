{
    "benchmarks.GxadminSuite.time_query_collection_usage": {
        "code": "class GxadminSuite:\n    def time_query_collection_usage(self):\n        query = \"\"\"\n            SELECT\n            \tdc.collection_type, count(*)\n            FROM\n            \thistory_dataset_collection_association AS hdca\n            \tINNER JOIN dataset_collection AS dc ON\n            \t\t\thdca.collection_id = dc.id\n            GROUP BY\n            \tdc.collection_type;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'collection-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_collection_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "8c9df5140c8192033c2b5e627bbbfd14e7703bcca146a4b7b35e4241d33d9913", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_data_origin_distribution": {
        "code": "class GxadminSuite:\n    def time_query_data_origin_distribution(self):\n        query = \"\"\"\n            WITH\n            \tasdf\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tCASE\n            \t\t\t\tWHEN job.tool_id = 'upload1' THEN 'created'\n            \t\t\t\tELSE 'derived'\n            \t\t\t\tEND\n            \t\t\t\t\tAS origin,\n            \t\t\t\tsum(\n            \t\t\t\t\tCOALESCE(\n            \t\t\t\t\t\tdataset.total_size,\n            \t\t\t\t\t\tdataset.file_size,\n            \t\t\t\t\t\t0\n            \t\t\t\t\t)\n            \t\t\t\t)\n            \t\t\t\t\tAS data,\n            \t\t\t\tdate_trunc('month', dataset.create_time)\n            \t\t\t\t\tAS created,\n            \t\t\t\tCOALESCE(job.user_id::STRING, '__UNKNOWN__')\n            \t\t\tFROM\n            \t\t\t\tjob\n            \t\t\t\tLEFT JOIN job_to_output_dataset ON\n            \t\t\t\t\t\tjob.id\n            \t\t\t\t\t\t= job_to_output_dataset.job_id\n            \t\t\t\tLEFT JOIN history_dataset_association ON\n            \t\t\t\t\t\tjob_to_output_dataset.dataset_id\n            \t\t\t\t\t\t= history_dataset_association.id\n            \t\t\t\tLEFT JOIN dataset ON\n            \t\t\t\t\t\thistory_dataset_association.dataset_id\n            \t\t\t\t\t\t= dataset.id\n            \t\t\tGROUP BY\n            \t\t\t\torigin, job.user_id, created, galaxy_user\n            \t\t)\n            SELECT\n            \torigin,\n            \tround(data, 2 - length(data::STRING)),\n            \tcreated,\n            \tgalaxy_user\n            FROM\n            \tasdf\n            ORDER BY\n            \tgalaxy_user DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'data-origin-distribution',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_data_origin_distribution", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "13eb458cb4710e1576ca4fe8269734557f11edddea1d770dab8918751e686fb4", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_data_origin_distribution_summary": {
        "code": "class GxadminSuite:\n    def time_query_data_origin_distribution_summary(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'data-origin-distribution-summary',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_data_origin_distribution_summary", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2d9604fbb95c4ec8e0517f1c564d82d26f53784f682a605275330068845111c0", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_datasets_created_daily": {
        "code": "class GxadminSuite:\n    def time_query_datasets_created_daily(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'datasets-created-daily',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_datasets_created_daily", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "fdaa6b374163e372ea94c6c18c17e9b22ed03ce3105e20446368e8aa6279e835", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_disk_usage": {
        "code": "class GxadminSuite:\n    def time_query_disk_usage(self):\n        query = \"\"\"\n            SELECT\n            \tobject_store_id,\n            \tsum(COALESCE(dataset.total_size, dataset.file_size, 0))\n            FROM\n            \tdataset\n            WHERE\n            \tNOT purged\n            GROUP BY\n            \tobject_store_id\n            ORDER BY\n            \tsum(COALESCE(dataset.total_size, dataset.file_size, 0))\n            \t\tDESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'disk-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_disk_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "856bda9d36cfe8a53dc26843344b3180c5b69522176d7d31e240c417945ea062", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_errored_jobs": {
        "code": "class GxadminSuite:\n    def time_query_errored_jobs(self):\n        query = \"\"\"\n            at or near \"as\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'errored-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_errored_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "6af62adc75598eb85d8f965c697e442e998a932c29fd15f21d5d68cca3598ad2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_good_for_pulsar": {
        "code": "class GxadminSuite:\n    def time_query_good_for_pulsar(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'good-for-pulsar',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_good_for_pulsar", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "6911422e6716b0f259f1d75a8983a706c54f1cd8c4c685a6f14dc12a956f227c", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_group_cpu_seconds": {
        "code": "class GxadminSuite:\n    def time_query_group_cpu_seconds(self):\n        query = \"\"\"\n            WITH\n            \tjobs_info\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tjob.user_id,\n            \t\t\t\tround(\n            \t\t\t\t\tsum(a.metric_value * b.metric_value),\n            \t\t\t\t\t2\n            \t\t\t\t)\n            \t\t\t\t\tAS cpu_seconds\n            \t\t\tFROM\n            \t\t\t\tjob_metric_numeric AS a,\n            \t\t\t\tjob_metric_numeric AS b,\n            \t\t\t\tjob\n            \t\t\tWHERE\n            \t\t\t\tjob.id = a.job_id\n            \t\t\t\tAND job.id = b.job_id\n            \t\t\t\tAND a.metric_name = 'runtime_seconds'\n            \t\t\t\tAND b.metric_name = 'galaxy_slots'\n            \t\t\tGROUP BY\n            \t\t\t\tjob.user_id\n            \t\t),\n            \tuser_job_info\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tuser_id, sum(cpu_seconds) AS cpu_seconds\n            \t\t\tFROM\n            \t\t\t\tjobs_info\n            \t\t\tGROUP BY\n            \t\t\t\tuser_id\n            \t\t)\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\tround(sum(user_job_info.cpu_seconds), 0) DESC\n            \t)\n            \t\tAS rank,\n            \tgalaxy_group.id AS group_id,\n            \tCOALESCE(galaxy_group.name::STRING, 'Anonymous'),\n            \tround(sum(user_job_info.cpu_seconds), 0) AS cpu_seconds\n            FROM\n            \tuser_job_info, galaxy_group, user_group_association\n            WHERE\n            \tuser_job_info.user_id = user_group_association.user_id\n            \tAND user_group_association.group_id = galaxy_group.id\n            GROUP BY\n            \tgalaxy_group.id, galaxy_group.name\n            ORDER BY\n            \tround(sum(user_job_info.cpu_seconds), 0) DESC\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'group-cpu-seconds',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_group_cpu_seconds", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "eae08eac6c9aebcc9169712e85cbdc0379d0c0bd8d41864c06e48f01cbf9a1cf", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_group_gpu_time": {
        "code": "class GxadminSuite:\n    def time_query_group_gpu_time(self):\n        query = \"\"\"\n            WITH\n            \tjobs_info\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tjob.user_id,\n            \t\t\t\tround(\n            \t\t\t\t\tsum(\n            \t\t\t\t\t\ta.metric_value\n            \t\t\t\t\t\t* length(\n            \t\t\t\t\t\t\t\treplace(\n            \t\t\t\t\t\t\t\t\tb.metric_value,\n            \t\t\t\t\t\t\t\t\t',',\n            \t\t\t\t\t\t\t\t\t''\n            \t\t\t\t\t\t\t\t)\n            \t\t\t\t\t\t\t)\n            \t\t\t\t\t),\n            \t\t\t\t\t2\n            \t\t\t\t)\n            \t\t\t\t\tAS gpu_seconds\n            \t\t\tFROM\n            \t\t\t\tjob_metric_numeric AS a,\n            \t\t\t\tjob_metric_text AS b,\n            \t\t\t\tjob\n            \t\t\tWHERE\n            \t\t\t\tjob.id = a.job_id\n            \t\t\t\tAND job.id = b.job_id\n            \t\t\t\tAND a.metric_name = 'runtime_seconds'\n            \t\t\t\tAND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            \t\t\tGROUP BY\n            \t\t\t\tjob.user_id\n            \t\t),\n            \tuser_job_info\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tuser_id, sum(gpu_seconds) AS gpu_seconds\n            \t\t\tFROM\n            \t\t\t\tjobs_info\n            \t\t\tGROUP BY\n            \t\t\t\tuser_id\n            \t\t)\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\tround(sum(user_job_info.gpu_seconds), 0) DESC\n            \t)\n            \t\tAS rank,\n            \tgalaxy_group.id AS group_id,\n            \tCOALESCE(galaxy_group.name::STRING, 'Anonymous'),\n            \tround(sum(user_job_info.gpu_seconds), 0) AS gpu_seconds\n            FROM\n            \tuser_job_info, galaxy_group, user_group_association\n            WHERE\n            \tuser_job_info.user_id = user_group_association.user_id\n            \tAND user_group_association.group_id = galaxy_group.id\n            GROUP BY\n            \tgalaxy_group.id, galaxy_group.name\n            ORDER BY\n            \tround(sum(user_job_info.gpu_seconds), 0) DESC\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'group-gpu-time',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_group_gpu_time", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "17c40c33b20c90fa8620559ce91ac3096b271e66609d37be2cf4393bf4e6ac36", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_groups_list": {
        "code": "class GxadminSuite:\n    def time_query_groups_list(self):\n        query = \"\"\"\n            SELECT\n            \tgalaxy_group.name, count(*)\n            FROM\n            \tgalaxy_group, user_group_association\n            WHERE\n            \tuser_group_association.group_id = galaxy_group.id\n            GROUP BY\n            \tname;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'groups-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_groups_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "05be49881901895e501f599fc48a823743c030444fcce91143f69d0d228fe622", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_hdca_datasets": {
        "code": "class GxadminSuite:\n    def time_query_hdca_datasets(self):\n        query = \"\"\"\n            at or near \"order\": syntax error\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'hdca-datasets',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_hdca_datasets", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "f96cfb9682670bdd915efe2875061df2583d86a4bd28f2a32c9b3c2d4a023f91", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_hdca_info": {
        "code": "class GxadminSuite:\n    def time_query_hdca_info(self):\n        query = \"\"\"\n            at or near \"EOF\": syntax error\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'hdca-info',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_hdca_info", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "58c17a215c894ea2c9cc7dbbf2f723d77fdc6aa72ecb4292d67dfdda70edf815", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_connections": {
        "code": "class GxadminSuite:\n    def time_query_history_connections(self):\n        query = \"\"\"\n            SELECT\n            \th.id AS h_id,\n            \th.update_time::DATE AS h_update,\n            \tjtod.job_id AS in_id,\n            \tj.tool_id AS in_tool,\n            \tj.tool_version AS in_tool_v,\n            \tjtid.job_id AS out_id,\n            \tj2.tool_id AS out_tool,\n            \tj2.tool_version AS out_ver\n            FROM\n            \tjob AS j\n            \tLEFT JOIN history AS h ON j.history_id = h.id\n            \tLEFT JOIN job_to_output_dataset AS jtod ON\n            \t\t\tj.id = jtod.job_id\n            \tLEFT JOIN job_to_input_dataset AS jtid ON\n            \t\t\tjtod.dataset_id = jtid.dataset_id\n            \tLEFT JOIN job AS j2 ON jtid.job_id = j2.id\n            WHERE\n            \tjtid.job_id IS NOT NULL;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-connections',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_connections", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "dadd580e0b8dfe1877625a89395e788758ff1abd58f55fbff7ecc5822fa6ba2f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_contents": {
        "code": "class GxadminSuite:\n    def time_query_history_contents(self):\n        query = \"\"\"\n            at or near \"EOF\": syntax error\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-contents',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_contents", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e0d5fdcf2cd8e0ab04955e1cc0b14d59854361f49346bd74ddfe7c33564cda91", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_system": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_system(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-system',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_system", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "479cde0db3dbb63d0b41808273c6eb86e8d65b52b494e3ed37ae1b91408e2643", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_system_by_tool": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_system_by_tool(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-system-by-tool',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_system_by_tool", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "21431f981d5512ac2110b48db785c0a3e455dcc536f2842b2df629665fbd0bed", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_history_runtime_wallclock": {
        "code": "class GxadminSuite:\n    def time_query_history_runtime_wallclock(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'history-runtime-wallclock',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_history_runtime_wallclock", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a722ab51974e152f60354439cf424b0aa03bc48b0cbc83cdcf5d76ffa91a0976", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_history": {
        "code": "class GxadminSuite:\n    def time_query_job_history(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-history',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_history", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e6e755005163006f512cf80c79c573a96a065f6e52f91071bcead0e36357af6a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_info": {
        "code": "class GxadminSuite:\n    def time_query_job_info(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-info',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_info", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "32af1d446befffc768bd44f70bccf05bc2e81627691d3db75de7258cb16c33bf", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_inputs": {
        "code": "class GxadminSuite:\n    def time_query_job_inputs(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-inputs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_inputs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ef9e19369bb4085db92506c4702eafc01bd33e0bc5dfc603914158f7e37f44d1", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_job_outputs": {
        "code": "class GxadminSuite:\n    def time_query_job_outputs(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'job-outputs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_job_outputs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "cae39ce17008a21648077c9b78c6e3bd15154bb7497626e38602fb13cb06d035", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_max_by_cpu_hours": {
        "code": "class GxadminSuite:\n    def time_query_jobs_max_by_cpu_hours(self):\n        query = \"\"\"\n            SELECT\n            \tjob.id,\n            \tjob.tool_id,\n            \tjob.create_time,\n            \tmetric_value / 1000000000 / 3600 / 24 AS cpu_days\n            FROM\n            \tjob, job_metric_numeric\n            WHERE\n            \tjob.id = job_metric_numeric.job_id\n            \tAND metric_name = 'cpuacct.usage'\n            ORDER BY\n            \tcpu_hours DESC\n            LIMIT\n            \t30;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-max-by-cpu-hours',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_max_by_cpu_hours", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5959e5c00b25e836515fe5e2052116acfaacb6cf8c56359e66af7bcc3f242435", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_nonterminal": {
        "code": "class GxadminSuite:\n    def time_query_jobs_nonterminal(self):\n        query = \"\"\"\n            at or near \",\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-nonterminal',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_nonterminal", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "caace8b0c6a7105d02876035b7bf01d5bf36a888676258e47fa10c89b8a5182a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_per_user": {
        "code": "class GxadminSuite:\n    def time_query_jobs_per_user(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-per-user',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_per_user", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "9801b87a10c0893c5b0f323747aea4372c037d0a2eb946871e3c94d3a5a56b30", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_queued": {
        "code": "class GxadminSuite:\n    def time_query_jobs_queued(self):\n        query = \"\"\"\n            SELECT\n            \tCASE\n            \tWHEN job_runner_external_id IS NOT NULL THEN 'processed'\n            \tELSE 'unprocessed'\n            \tEND\n            \t\tAS n,\n            \tcount(*)\n            FROM\n            \tjob\n            WHERE\n            \tstate = 'queued'\n            GROUP BY\n            \tn;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-queued',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_queued", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "97820e0ba57a0bdf261d3df8872d365d5990d8be280f5121d482f75b11cfebf6", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_queued_internal_by_handler": {
        "code": "class GxadminSuite:\n    def time_query_jobs_queued_internal_by_handler(self):\n        query = \"\"\"\n            SELECT\n            \thandler, count(handler)\n            FROM\n            \tjob\n            WHERE\n            \tstate = 'queued' AND job_runner_external_id IS NULL\n            GROUP BY\n            \thandler;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-queued-internal-by-handler',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_queued_internal_by_handler", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "745123d84dd584892a9871581e1c889cec28d454c8bebbdba3592c46918b518c", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_jobs_ready_to_run": {
        "code": "class GxadminSuite:\n    def time_query_jobs_ready_to_run(self):\n        query = \"\"\"\n            SELECT\n            \tEXISTS(\n            \t\tSELECT\n            \t\t\thistory_dataset_association.id,\n            \t\t\thistory_dataset_association.history_id,\n            \t\t\thistory_dataset_association.dataset_id,\n            \t\t\thistory_dataset_association.create_time,\n            \t\t\thistory_dataset_association.update_time,\n            \t\t\thistory_dataset_association.state,\n            \t\t\thistory_dataset_association.copied_from_history_dataset_association_id,\n            \t\t\thistory_dataset_association.copied_from_library_dataset_dataset_association_id,\n            \t\t\thistory_dataset_association.name,\n            \t\t\thistory_dataset_association.info,\n            \t\t\thistory_dataset_association.blurb,\n            \t\t\thistory_dataset_association.peek,\n            \t\t\thistory_dataset_association.tool_version,\n            \t\t\thistory_dataset_association.extension,\n            \t\t\thistory_dataset_association.metadata,\n            \t\t\thistory_dataset_association.parent_id,\n            \t\t\thistory_dataset_association.designation,\n            \t\t\thistory_dataset_association.deleted,\n            \t\t\thistory_dataset_association.visible,\n            \t\t\thistory_dataset_association.extended_metadata_id,\n            \t\t\thistory_dataset_association.version,\n            \t\t\thistory_dataset_association.hid,\n            \t\t\thistory_dataset_association.purged,\n            \t\t\thistory_dataset_association.hidden_beneath_collection_instance_id\n            \t\tFROM\n            \t\t\thistory_dataset_association,\n            \t\t\tjob_to_output_dataset\n            \t\tWHERE\n            \t\t\tjob.id = job_to_output_dataset.job_id\n            \t\t\tAND history_dataset_association.id\n            \t\t\t\t= job_to_output_dataset.dataset_id\n            \t\t\tAND history_dataset_association.deleted = true\n            \t)\n            \t\tAS anon_1,\n            \tEXISTS(\n            \t\tSELECT\n            \t\t\thistory_dataset_collection_association.id\n            \t\tFROM\n            \t\t\thistory_dataset_collection_association,\n            \t\t\tjob_to_output_dataset_collection\n            \t\tWHERE\n            \t\t\tjob.id = job_to_output_dataset_collection.job_id\n            \t\t\tAND history_dataset_collection_association.id\n            \t\t\t\t= job_to_output_dataset_collection.dataset_collection_id\n            \t\t\tAND history_dataset_collection_association.deleted\n            \t\t\t\t= true\n            \t)\n            \t\tAS anon_2,\n            \tjob.id AS job_id,\n            \tjob.create_time AS job_create_time,\n            \tjob.update_time AS job_update_time,\n            \tjob.history_id AS job_history_id,\n            \tjob.library_folder_id AS job_library_folder_id,\n            \tjob.tool_id AS job_tool_id,\n            \tjob.tool_version AS job_tool_version,\n            \tjob.state AS job_state,\n            \tjob.info AS job_info,\n            \tjob.copied_from_job_id AS job_copied_from_job_id,\n            \tjob.command_line AS job_command_line,\n            \tjob.dependencies AS job_dependencies,\n            \tjob.param_filename AS job_param_filename,\n            \tjob.runner_name AS job_runner_name_1,\n            \tjob.stdout AS job_stdout,\n            \tjob.stderr AS job_stderr,\n            \tjob.exit_code AS job_exit_code,\n            \tjob.traceback AS job_traceback,\n            \tjob.session_id AS job_session_id,\n            \tjob.user_id AS job_user_id,\n            \tjob.job_runner_name AS job_job_runner_name,\n            \tjob.job_runner_external_id\n            \t\tAS job_job_runner_external_id,\n            \tjob.destination_id AS job_destination_id,\n            \tjob.destination_params AS job_destination_params,\n            \tjob.object_store_id AS job_object_store_id,\n            \tjob.imported AS job_imported,\n            \tjob.params AS job_params,\n            \tjob.handler AS job_handler\n            FROM\n            \tjob\n            WHERE\n            \tjob.state = 'new'\n            \tAND job.handler IS NULL\n            \tAND job.handler = 'handler0';\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'jobs-ready-to-run',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_jobs_ready_to_run", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ebbca8085ed4fb0dbf3420e076523ccd6fc0f05925ab3cc0329ae9a46304070d", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_largest_collection": {
        "code": "class GxadminSuite:\n    def time_query_largest_collection(self):\n        query = \"\"\"\n            WITH\n            \ttemp_table_collection_count\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tcount(*)\n            \t\t\tFROM\n            \t\t\t\tdataset_collection_element\n            \t\t\tGROUP BY\n            \t\t\t\tdataset_collection_id\n            \t\t\tORDER BY\n            \t\t\t\tcount DESC\n            \t\t)\n            SELECT\n            \tmax(count) AS count\n            FROM\n            \ttemp_table_collection_count;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'largest-collection',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_largest_collection", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "619cfd775b0e2fc0d6fe154f38484f0bad4b0621932e6d0e22c85ac88a9a3d89", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_largest_histories": {
        "code": "class GxadminSuite:\n    def time_query_largest_histories(self):\n        query = \"\"\"\n            SELECT\n            \tsum(COALESCE(dataset.total_size, dataset.file_size, 0))\n            \t\tAS total_size,\n            \thistory.id,\n            \tsubstring(history.name, 1, 10),\n            \tCOALESCE(galaxy_user.username::STRING, '__UNKNOWN__')\n            FROM\n            \tdataset\n            \tJOIN history_dataset_association ON\n            \t\t\tdataset.id\n            \t\t\t= history_dataset_association.dataset_id\n            \tJOIN history ON\n            \t\t\thistory_dataset_association.history_id\n            \t\t\t= history.id\n            \tJOIN galaxy_user ON history.user_id = galaxy_user.id\n            GROUP BY\n            \thistory.id,\n            \thistory.name,\n            \thistory.user_id,\n            \tgalaxy_user.username\n            ORDER BY\n            \tsum(COALESCE(dataset.total_size, dataset.file_size, 0))\n            \t\tDESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'largest-histories',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_largest_histories", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "12e46c1dd13fb751cb93ef21a83482f4c2d68153d1a16c1ed7236c80e0f35128", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_latest_users": {
        "code": "class GxadminSuite:\n    def time_query_latest_users(self):\n        query = \"\"\"\n            at or near \"as\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'latest-users',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_latest_users", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e5214098697ca18787442a4a9671535f5c0f745f26cdadb79158ec8f8b2e2492", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_cpu_stats": {
        "code": "class GxadminSuite:\n    def time_query_monthly_cpu_stats(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-cpu-stats',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_cpu_stats", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "81c910d9fe2c25de12cb738fce7019da419e89ae30aec766a73051ad49f7957e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_cpu_years": {
        "code": "class GxadminSuite:\n    def time_query_monthly_cpu_years(self):\n        query = \"\"\"\n            SELECT\n            \tdate_trunc('month', job.create_time)::DATE AS month,\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value * b.metric_value\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tAS cpu_years\n            FROM\n            \tjob_metric_numeric AS a, job_metric_numeric AS b, job\n            WHERE\n            \tb.job_id = a.job_id\n            \tAND a.job_id = job.id\n            \tAND a.metric_name = 'runtime_seconds'\n            \tAND b.metric_name = 'galaxy_slots'\n            GROUP BY\n            \tdate_trunc('month', job.create_time)\n            ORDER BY\n            \tdate_trunc('month', job.create_time) DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-cpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_cpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "aad8a673da57765ae023fe2d78a13d9eb258013862cb71ead4e8fec57bea662a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_data": {
        "code": "class GxadminSuite:\n    def time_query_monthly_data(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-data',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_data", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d2f5e8106755e08a9b81f44b0283cc6c13aed42da69524d7570b68c2fbe66873", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_gpu_years": {
        "code": "class GxadminSuite:\n    def time_query_monthly_gpu_years(self):\n        query = \"\"\"\n            SELECT\n            \tdate_trunc('month', job.create_time)::DATE AS month,\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value\n            \t\t\t* length(replace(b.metric_value, ',', ''))\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tAS gpu_years\n            FROM\n            \tjob_metric_numeric AS a, job_metric_text AS b, job\n            WHERE\n            \tb.job_id = a.job_id\n            \tAND a.job_id = job.id\n            \tAND a.metric_name = 'runtime_seconds'\n            \tAND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            GROUP BY\n            \tdate_trunc('month', job.create_time)\n            ORDER BY\n            \tdate_trunc('month', job.create_time) DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-gpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_gpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "5818eabb6fab8a4c732dc2356fd90e54a76aea1f46722b66ec75ff30bea3d0c5", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_jobs": {
        "code": "class GxadminSuite:\n    def time_query_monthly_jobs(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b5be9052dd9b40d4b1a7c9ebdf5bf6006dd8cab35c68eb60fc73bf010d4a3996", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_users_active": {
        "code": "class GxadminSuite:\n    def time_query_monthly_users_active(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-users-active',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_users_active", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "98e9430c089ee0b445ff58837c1c438e14bf0e69fff44fe0f40502c78e86bae3", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_monthly_users_registered": {
        "code": "class GxadminSuite:\n    def time_query_monthly_users_registered(self):\n        query = \"\"\"\n            SELECT\n            \tdate_trunc('month', galaxy_user.create_time)::DATE\n            \t\tAS month,\n            \tcount(*)\n            FROM\n            \tgalaxy_user\n            GROUP BY\n            \tmonth\n            ORDER BY\n            \tmonth DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'monthly-users-registered',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_monthly_users_registered", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2dbb2cacde926d42cb1aee1387e9ce5b80fff7fc5c765a2465fa8b433f2b0c11", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_old_histories": {
        "code": "class GxadminSuite:\n    def time_query_old_histories(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'old-histories',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_old_histories", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d1ee9ac7a95e809ad5925c3d4df65d7d77544f4b997c7e91c79c64f8cf871ced", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_cache_hit": {
        "code": "class GxadminSuite:\n    def time_query_pg_cache_hit(self):\n        query = \"\"\"\n            SELECT\n            \tsum(heap_blks_read) AS heap_read,\n            \tsum(heap_blks_hit) AS heap_hit,\n            \tsum(heap_blks_hit)\n            \t/ (sum(heap_blks_hit) + sum(heap_blks_read))\n            \t\tAS ratio\n            FROM\n            \tpg_statio_user_tables;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-cache-hit',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_cache_hit", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e41876c401fe4892afd546b69cb9162f10e6b0576b19a34844ea10689ce9db77", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_index_size": {
        "code": "class GxadminSuite:\n    def time_query_pg_index_size(self):\n        query = \"\"\"\n            SELECT\n            \tc.relname AS name,\n            \tsum(c.relpages::INT8 * 8192)::INT8 AS size\n            FROM\n            \tpg_class AS c\n            \tLEFT JOIN pg_namespace AS n ON n.oid = c.relnamespace\n            WHERE\n            \tn.nspname NOT IN ('pg_catalog', 'information_schema')\n            \tAND n.nspname !~ '^pg_toast'\n            \tAND c.relkind = 'i'\n            GROUP BY\n            \tc.relname\n            ORDER BY\n            \tsum(c.relpages) DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-index-size',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_index_size", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "983685a63aee92aa0a3e70de75a2050ed91b4ea0402acbe5d28aef5bb1cb6aba", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_index_usage": {
        "code": "class GxadminSuite:\n    def time_query_pg_index_usage(self):\n        query = \"\"\"\n            SELECT\n            \trelname,\n            \tCASE COALESCE(idx_scan, 0)\n            \tWHEN 0 THEN -1\n            \tELSE (100 * idx_scan / (seq_scan + idx_scan))\n            \tEND\n            \t\tAS percent_of_times_index_used,\n            \tn_live_tup AS rows_in_table\n            FROM\n            \tpg_stat_user_tables\n            ORDER BY\n            \tn_live_tup DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-index-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_index_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "6eb142c5e9620349708da1dd2a0053031f2141c402ff7febd754b5a76ea15eb2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_long_running_queries": {
        "code": "class GxadminSuite:\n    def time_query_pg_long_running_queries(self):\n        query = \"\"\"\n            SELECT\n            \tpid,\n            \tnow() - pg_stat_activity.query_start AS duration,\n            \tquery AS query\n            FROM\n            \tpg_stat_activity\n            WHERE\n            \tpg_stat_activity.query != ''::STRING\n            \tAND state != 'idle'\n            \tAND now() - pg_stat_activity.query_start\n            \t\t> '00:05:00':::INTERVAL\n            ORDER BY\n            \tnow() - pg_stat_activity.query_start DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-long-running-queries',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_long_running_queries", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "50d2049a0596a7a5bc6f79fe04e53659903cdfab48e0e16106050a9f9ba9639f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_mandelbrot": {
        "code": "class GxadminSuite:\n    def time_query_pg_mandelbrot(self):\n        query = \"\"\"\n            at or near \"select\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-mandelbrot',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_mandelbrot", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ec8147516a97d8181066e24573e023212465d605a6b6ef9f5da5e55fdc43331b", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_stat_bgwriter": {
        "code": "class GxadminSuite:\n    def time_query_pg_stat_bgwriter(self):\n        query = \"\"\"\n            SELECT\n            \tcheckpoints_timed,\n            \tcheckpoints_req,\n            \tcheckpoint_write_time,\n            \tcheckpoint_sync_time,\n            \tbuffers_checkpoint,\n            \tbuffers_clean,\n            \tmaxwritten_clean,\n            \tbuffers_backend,\n            \tbuffers_backend_fsync,\n            \tbuffers_alloc\n            FROM\n            \tpg_stat_bgwriter;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-stat-bgwriter',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_stat_bgwriter", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d7a091839c4dc4363cf4fd1849e1992d23195d806efb4da59be8e2943c065e5e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_stat_user_tables": {
        "code": "class GxadminSuite:\n    def time_query_pg_stat_user_tables(self):\n        query = \"\"\"\n            SELECT\n            \tschemaname,\n            \trelname,\n            \tseq_scan,\n            \tseq_tup_read,\n            \tCOALESCE(idx_scan, 0),\n            \tCOALESCE(idx_tup_fetch, 0),\n            \tn_tup_ins,\n            \tn_tup_upd,\n            \tn_tup_del,\n            \tn_tup_hot_upd,\n            \tn_live_tup,\n            \tn_dead_tup,\n            \tvacuum_count,\n            \tautovacuum_count,\n            \tanalyze_count,\n            \tautoanalyze_count\n            FROM\n            \tpg_stat_user_tables;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-stat-user-tables',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_stat_user_tables", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ed086f22a3e488fdf6d1f3e9bc9f9b1f07823bddcc65e45913862c285cd0fb90", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_table_bloat": {
        "code": "class GxadminSuite:\n    def time_query_pg_table_bloat(self):\n        query = \"\"\"\n            WITH\n            \tconstants\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tcurrent_setting('block_size')::DECIMAL\n            \t\t\t\t\tAS bs,\n            \t\t\t\t23 AS hdr,\n            \t\t\t\t4 AS ma\n            \t\t),\n            \tbloat_info\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tma,\n            \t\t\t\tbs,\n            \t\t\t\tschemaname,\n            \t\t\t\ttablename,\n            \t\t\t\t(\n            \t\t\t\t\tdatawidth\n            \t\t\t\t\t+ hdr + ma\n            \t\t\t\t\t\t- (\n            \t\t\t\t\t\t\t\tCASE\n            \t\t\t\t\t\t\t\tWHEN hdr % ma = 0 THEN ma\n            \t\t\t\t\t\t\t\tELSE hdr % ma\n            \t\t\t\t\t\t\t\tEND\n            \t\t\t\t\t\t\t)\n            \t\t\t\t)::DECIMAL\n            \t\t\t\t\tAS datahdr,\n            \t\t\t\tmaxfracsum\n            \t\t\t\t* (\n            \t\t\t\t\t\tnullhdr + ma\n            \t\t\t\t\t\t- (\n            \t\t\t\t\t\t\t\tCASE\n            \t\t\t\t\t\t\t\tWHEN nullhdr % ma = 0\n            \t\t\t\t\t\t\t\tTHEN ma\n            \t\t\t\t\t\t\t\tELSE nullhdr % ma\n            \t\t\t\t\t\t\t\tEND\n            \t\t\t\t\t\t\t)\n            \t\t\t\t\t)\n            \t\t\t\t\tAS nullhdr2\n            \t\t\tFROM\n            \t\t\t\t(\n            \t\t\t\t\tSELECT\n            \t\t\t\t\t\tschemaname,\n            \t\t\t\t\t\ttablename,\n            \t\t\t\t\t\thdr,\n            \t\t\t\t\t\tma,\n            \t\t\t\t\t\tbs,\n            \t\t\t\t\t\tsum((1 - null_frac) * avg_width)\n            \t\t\t\t\t\t\tAS datawidth,\n            \t\t\t\t\t\tmax(null_frac) AS maxfracsum,\n            \t\t\t\t\t\thdr\n            \t\t\t\t\t\t+ (\n            \t\t\t\t\t\t\t\tSELECT\n            \t\t\t\t\t\t\t\t\t1 + count(*) / 8\n            \t\t\t\t\t\t\t\tFROM\n            \t\t\t\t\t\t\t\t\tpg_stats AS s2\n            \t\t\t\t\t\t\t\tWHERE\n            \t\t\t\t\t\t\t\t\tnull_frac != 0\n            \t\t\t\t\t\t\t\t\tAND s2.schemaname\n            \t\t\t\t\t\t\t\t\t\t= s.schemaname\n            \t\t\t\t\t\t\t\t\tAND s2.tablename\n            \t\t\t\t\t\t\t\t\t\t= s.tablename\n            \t\t\t\t\t\t\t)\n            \t\t\t\t\t\t\tAS nullhdr\n            \t\t\t\t\tFROM\n            \t\t\t\t\t\tpg_stats AS s, constants\n            \t\t\t\t\tGROUP BY\n            \t\t\t\t\t\t1, 2, 3, 4, 5\n            \t\t\t\t)\n            \t\t\t\t\tAS foo\n            \t\t),\n            \ttable_bloat\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tschemaname,\n            \t\t\t\ttablename,\n            \t\t\t\tcc.relpages,\n            \t\t\t\tbs,\n            \t\t\t\tceil(\n            \t\t\t\t\tcc.reltuples\n            \t\t\t\t\t* (\n            \t\t\t\t\t\t\tdatahdr + ma\n            \t\t\t\t\t\t\t- (\n            \t\t\t\t\t\t\t\t\tCASE\n            \t\t\t\t\t\t\t\t\tWHEN datahdr % ma = 0\n            \t\t\t\t\t\t\t\t\tTHEN ma\n            \t\t\t\t\t\t\t\t\tELSE datahdr % ma\n            \t\t\t\t\t\t\t\t\tEND\n            \t\t\t\t\t\t\t\t)\n            \t\t\t\t\t\t\t+ nullhdr2\n            \t\t\t\t\t\t\t+ 4\n            \t\t\t\t\t\t)\n            \t\t\t\t\t/ (bs - 20::FLOAT8)\n            \t\t\t\t)\n            \t\t\t\t\tAS otta\n            \t\t\tFROM\n            \t\t\t\tbloat_info\n            \t\t\t\tJOIN pg_class AS cc ON\n            \t\t\t\t\t\tcc.relname = bloat_info.tablename\n            \t\t\t\tJOIN pg_namespace AS nn ON\n            \t\t\t\t\t\tcc.relnamespace = nn.oid\n            \t\t\t\t\t\tAND nn.nspname\n            \t\t\t\t\t\t\t= bloat_info.schemaname\n            \t\t\t\t\t\tAND nn.nspname\n            \t\t\t\t\t\t\t!= 'information_schema'\n            \t\t),\n            \tindex_bloat\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tschemaname,\n            \t\t\t\ttablename,\n            \t\t\t\tbs,\n            \t\t\t\tCOALESCE(c2.relname, '?') AS iname,\n            \t\t\t\tCOALESCE(c2.reltuples, 0) AS ituples,\n            \t\t\t\tc2.relpages,\n            \t\t\t\t0 AS ipages,\n            \t\t\t\tCOALESCE(\n            \t\t\t\t\tceil(\n            \t\t\t\t\t\tc2.reltuples * (datahdr - 12)\n            \t\t\t\t\t\t/ (bs - 20::FLOAT8)\n            \t\t\t\t\t),\n            \t\t\t\t\t0\n            \t\t\t\t)\n            \t\t\t\t\tAS iotta\n            \t\t\tFROM\n            \t\t\t\tbloat_info\n            \t\t\t\tJOIN pg_class AS cc ON\n            \t\t\t\t\t\tcc.relname = bloat_info.tablename\n            \t\t\t\tJOIN pg_namespace AS nn ON\n            \t\t\t\t\t\tcc.relnamespace = nn.oid\n            \t\t\t\t\t\tAND nn.nspname\n            \t\t\t\t\t\t\t= bloat_info.schemaname\n            \t\t\t\t\t\tAND nn.nspname\n            \t\t\t\t\t\t\t!= 'information_schema'\n            \t\t\t\tJOIN pg_index AS i ON indrelid = cc.oid\n            \t\t\t\tJOIN pg_class AS c2 ON c2.oid = i.indexrelid\n            \t\t)\n            SELECT\n            \ttype, schemaname, object_name, bloat, raw_waste AS waste\n            FROM\n            \t(\n            \t\tSELECT\n            \t\t\t'table' AS type,\n            \t\t\tschemaname,\n            \t\t\ttablename AS object_name,\n            \t\t\tround(\n            \t\t\t\tCASE\n            \t\t\t\tWHEN otta = 0 THEN 0.0\n            \t\t\t\tELSE table_bloat.relpages / otta::DECIMAL\n            \t\t\t\tEND,\n            \t\t\t\t1\n            \t\t\t)\n            \t\t\t\tAS bloat,\n            \t\t\tCASE\n            \t\t\tWHEN relpages < otta THEN '0'\n            \t\t\tELSE (\n            \t\t\t\tbs * (table_bloat.relpages - otta)::INT8\n            \t\t\t)::INT8\n            \t\t\tEND\n            \t\t\t\tAS raw_waste\n            \t\tFROM\n            \t\t\ttable_bloat\n            \t\tUNION\n            \t\t\tSELECT\n            \t\t\t\t'index' AS type,\n            \t\t\t\tschemaname,\n            \t\t\t\ttablename || '::' || iname AS object_name,\n            \t\t\t\tround(\n            \t\t\t\t\tCASE\n            \t\t\t\t\tWHEN iotta = 0 OR ipages = 0 THEN 0.0\n            \t\t\t\t\tELSE ipages / iotta::DECIMAL\n            \t\t\t\t\tEND,\n            \t\t\t\t\t1\n            \t\t\t\t)\n            \t\t\t\t\tAS bloat,\n            \t\t\t\tCASE\n            \t\t\t\tWHEN ipages < iotta THEN '0'\n            \t\t\t\tELSE (bs * (ipages - iotta))::INT8\n            \t\t\t\tEND\n            \t\t\t\t\tAS raw_waste\n            \t\t\tFROM\n            \t\t\t\tindex_bloat\n            \t)\n            \t\tAS bloat_summary\n            ORDER BY\n            \traw_waste DESC, bloat DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-table-bloat',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_table_bloat", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "6020fa15b7098282aa60ef40dee3f576f0eee0a5f669fece2169da1cca5eb8e0", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_table_size": {
        "code": "class GxadminSuite:\n    def time_query_pg_table_size(self):\n        query = \"\"\"\n            SELECT\n            \tc.relname AS name,\n            \tpg_table_size(c.oid) AS size,\n            \tpg_indexes_size(c.oid) AS index_size\n            FROM\n            \tpg_class AS c\n            \tLEFT JOIN pg_namespace AS n ON n.oid = c.relnamespace\n            WHERE\n            \tn.nspname NOT IN ('pg_catalog', 'information_schema')\n            \tAND n.nspname !~ '^pg_toast'\n            \tAND c.relkind = 'r'\n            ORDER BY\n            \tpg_table_size(c.oid) DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-table-size',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_table_size", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ae0c9fc1ab58251fcaf5800c2d7ea927889ee2147922499daa3ba0996e9eaaa7", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_unused_indexes": {
        "code": "class GxadminSuite:\n    def time_query_pg_unused_indexes(self):\n        query = \"\"\"\n            at or near \"nulls\": syntax error\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-unused-indexes',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_unused_indexes", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "744dae2d40f306d4b0ee8f249d2e9d4669a7921f2fbbadd3ded6ff5e835d7547", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_pg_vacuum_stats": {
        "code": "class GxadminSuite:\n    def time_query_pg_vacuum_stats(self):\n        query = \"\"\"\n            WITH\n            \ttable_opts\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tpg_class.oid,\n            \t\t\t\trelname,\n            \t\t\t\tnspname,\n            \t\t\t\tarray_to_string(reloptions, '') AS relopts\n            \t\t\tFROM\n            \t\t\t\tpg_class\n            \t\t\t\tINNER JOIN pg_namespace AS ns ON\n            \t\t\t\t\t\trelnamespace = ns.oid\n            \t\t),\n            \tvacuum_settings\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\toid,\n            \t\t\t\trelname,\n            \t\t\t\tnspname,\n            \t\t\t\tCASE\n            \t\t\t\tWHEN relopts\n            \t\t\t\tLIKE '%autovacuum_vacuum_threshold%'\n            \t\t\t\tTHEN substring(\n            \t\t\t\t\trelopts,\n            \t\t\t\t\t'.*autovacuum_vacuum_threshold=([0-9.]+).*'\n            \t\t\t\t)::INT8\n            \t\t\t\tELSE current_setting(\n            \t\t\t\t\t'autovacuum_vacuum_threshold'\n            \t\t\t\t)::INT8\n            \t\t\t\tEND\n            \t\t\t\t\tAS autovacuum_vacuum_threshold,\n            \t\t\t\tCASE\n            \t\t\t\tWHEN relopts\n            \t\t\t\tLIKE '%autovacuum_vacuum_scale_factor%'\n            \t\t\t\tTHEN substring(\n            \t\t\t\t\trelopts,\n            \t\t\t\t\t'.*autovacuum_vacuum_scale_factor=([0-9.]+).*'\n            \t\t\t\t)::FLOAT4\n            \t\t\t\tELSE current_setting(\n            \t\t\t\t\t'autovacuum_vacuum_scale_factor'\n            \t\t\t\t)::FLOAT4\n            \t\t\t\tEND\n            \t\t\t\t\tAS autovacuum_vacuum_scale_factor\n            \t\t\tFROM\n            \t\t\t\ttable_opts\n            \t\t)\n            SELECT\n            \tvacuum_settings.nspname AS schema,\n            \tvacuum_settings.relname AS table,\n            \tto_char(psut.last_vacuum, 'YYYY-MM-DD HH24:MI')\n            \t\tAS last_vacuum,\n            \tto_char(psut.last_autovacuum, 'YYYY-MM-DD HH24:MI')\n            \t\tAS last_autovacuum,\n            \tto_char(pg_class.reltuples, '9G999G999G999')\n            \t\tAS rowcount,\n            \tto_char(psut.n_dead_tup, '9G999G999G999')\n            \t\tAS dead_rowcount,\n            \tto_char(\n            \t\tautovacuum_vacuum_threshold\n            \t\t+ autovacuum_vacuum_scale_factor::DECIMAL\n            \t\t\t* pg_class.reltuples,\n            \t\t'9G999G999G999'\n            \t)\n            \t\tAS autovacuum_threshold,\n            \tCASE\n            \tWHEN autovacuum_vacuum_threshold\n            \t+ autovacuum_vacuum_scale_factor::DECIMAL\n            \t\t* pg_class.reltuples\n            \t< psut.n_dead_tup\n            \tTHEN 'yes'\n            \tEND\n            \t\tAS expect_autovacuum\n            FROM\n            \tpg_stat_user_tables AS psut\n            \tINNER JOIN pg_class ON psut.relid = pg_class.oid\n            \tINNER JOIN vacuum_settings ON\n            \t\t\tpg_class.oid = vacuum_settings.oid\n            ORDER BY\n            \t1;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'pg-vacuum-stats',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_pg_vacuum_stats", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e68a3c83ab0e5b541d57cae36b6c247011f021c4ab62242813ddac75794133d2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue": {
        "code": "class GxadminSuite:\n    def time_query_queue(self):\n        query = \"\"\"\n            SELECT\n            \ttool_id, state, count(tool_id) AS tool_count\n            FROM\n            \tjob\n            WHERE\n            \tstate IN ('queued', 'running')\n            GROUP BY\n            \ttool_id, state\n            ORDER BY\n            \ttool_count DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "562f925f7049974de7133fc7cb718b8fcff116dc3dfdb9cd89b880f5881b5b4c", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_detail": {
        "code": "class GxadminSuite:\n    def time_query_queue_detail(self):\n        query = \"\"\"\n            at or near \"-\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-detail',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_detail", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a03bf5e53044301cd14638689a1b54b451e7cbcc714cd19f1f4a8507c2a81e6f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_detail_by_handler": {
        "code": "class GxadminSuite:\n    def time_query_queue_detail_by_handler(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-detail-by-handler',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_detail_by_handler", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d04f1fea94193c880d0d170bbeba0234aa68a94e3544172febb5f0c2545b88e2", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_overview": {
        "code": "class GxadminSuite:\n    def time_query_queue_overview(self):\n        query = \"\"\"\n            WITH\n            \tqueue\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tregexp_replace(\n            \t\t\t\t\ttool_id,\n            \t\t\t\t\t'/[0-9.a-z+-]+$',\n            \t\t\t\t\t''\n            \t\t\t\t)::STRING\n            \t\t\t\t\tAS tool_id,\n            \t\t\t\ttool_version::STRING,\n            \t\t\t\tCOALESCE(destination_id, 'unknown')::STRING\n            \t\t\t\t\tAS destination_id,\n            \t\t\t\tCOALESCE(handler, 'unknown')::STRING\n            \t\t\t\t\tAS handler,\n            \t\t\t\tstate::STRING,\n            \t\t\t\tCOALESCE(job_runner_name, 'unknown')::STRING\n            \t\t\t\t\tAS job_runner_name,\n            \t\t\t\tcount(*) AS count,\n            \t\t\t\tuser_id::STRING AS user_id\n            \t\t\tFROM\n            \t\t\t\tjob\n            \t\t\tWHERE\n            \t\t\t\tstate = 'running'\n            \t\t\t\tOR state = 'queued'\n            \t\t\t\tOR state = 'new'\n            \t\t\tGROUP BY\n            \t\t\t\ttool_id,\n            \t\t\t\ttool_version,\n            \t\t\t\tdestination_id,\n            \t\t\t\thandler,\n            \t\t\t\tstate,\n            \t\t\t\tjob_runner_name,\n            \t\t\t\tuser_id\n            \t\t)\n            SELECT\n            \ttool_id,\n            \ttool_version,\n            \tdestination_id,\n            \thandler,\n            \tstate,\n            \tjob_runner_name,\n            \tsum(count),\n            \tuser_id\n            FROM\n            \tqueue\n            GROUP BY\n            \ttool_id,\n            \ttool_version,\n            \tdestination_id,\n            \thandler,\n            \tstate,\n            \tjob_runner_name,\n            \tuser_id;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-overview',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_overview", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "7426cf99b0372d83476bcfadddb1ffa14e1569406e8ff4731d2fcc69911de34a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_queue_time": {
        "code": "class GxadminSuite:\n    def time_query_queue_time(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'queue-time',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_queue_time", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "d0d7c15f9f38a18f02f4c92fca72b4311b06256e75018e16b78a08e3ca1e58fc", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_recent_jobs": {
        "code": "class GxadminSuite:\n    def time_query_recent_jobs(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'recent-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_recent_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "21fa81c9b449e01f094502260356340b4e4dfcb64e9ec922480b59d1ac4d3a57", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_runtime_per_user": {
        "code": "class GxadminSuite:\n    def time_query_runtime_per_user(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'runtime-per-user',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_runtime_per_user", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "4c7dba9caeab07f7f978d51ff8abf07d0273977346bdab57b9770745d18f7d1f", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_available_metrics": {
        "code": "class GxadminSuite:\n    def time_query_tool_available_metrics(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-available-metrics',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_available_metrics", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "bf02b7c5f2ea00c4b891c9a452c236ff776fe329ebe44e380ee9d552404ddbcd", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_errors": {
        "code": "class GxadminSuite:\n    def time_query_tool_errors(self):\n        query = \"\"\"\n            SELECT\n            \tj.tool_id,\n            \tcount(*) AS tool_runs,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'error' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_errored,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'failed' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_failed,\n            \tsum(CASE WHEN j.state = 'error' THEN 1 ELSE 0 END)\n            \t\tAS count_errored,\n            \tsum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)\n            \t\tAS count_failed,\n            \tj.handler\n            FROM\n            \tjob AS j\n            WHERE\n            \tj.create_time > (now() - '4 weeks'::INTERVAL)\n            GROUP BY\n            \tj.tool_id, j.handler\n            HAVING\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state IN ('error', 'failed') THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)\n            \t* 100.0\n            \t/ count(*)\n            \t> 10.0\n            ORDER BY\n            \ttool_runs DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-errors',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_errors", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ceb0925c5055ee617a9797308fa8e3029bb646e29624c7e4e27b05de5c0e7e67", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_last_used_date": {
        "code": "class GxadminSuite:\n    def time_query_tool_last_used_date(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-last-used-date',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_last_used_date", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "89885fe6c207a8c3c4e573e38d1202ab6669a1e23acb3e855359de36525ea223", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_likely_broken": {
        "code": "class GxadminSuite:\n    def time_query_tool_likely_broken(self):\n        query = \"\"\"\n            SELECT\n            \tj.tool_id,\n            \tcount(*) AS tool_runs,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'error' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_errored,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'failed' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_failed,\n            \tsum(CASE WHEN j.state = 'error' THEN 1 ELSE 0 END)\n            \t\tAS count_errored,\n            \tsum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)\n            \t\tAS count_failed,\n            \tj.handler\n            FROM\n            \tjob AS j\n            WHERE\n            \tj.create_time > (now() - '4 weeks'::INTERVAL)\n            GROUP BY\n            \tj.tool_id, j.handler\n            HAVING\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state IN ('error', 'failed') THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)\n            \t* 100.0\n            \t/ count(*)\n            \t> 95.0\n            \tAND count(*) > 4\n            ORDER BY\n            \ttool_runs DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-likely-broken',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_likely_broken", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "a47036e056ead162c8b009e3e0107593a1e9194bd18bcf00a53f69582b587b67", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_metrics": {
        "code": "class GxadminSuite:\n    def time_query_tool_metrics(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-metrics',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_metrics", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "f771713d13b80f9fd721edd586c4e5b9404e8c388540172cd9667327bf5207ee", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_new_errors": {
        "code": "class GxadminSuite:\n    def time_query_tool_new_errors(self):\n        query = \"\"\"\n            SELECT\n            \tj.tool_id,\n            \tcount(*) AS tool_runs,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'error' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_errored,\n            \tsum(\n            \t\tCASE\n            \t\tWHEN j.state = 'failed' THEN 1\n            \t\tELSE 0\n            \t\tEND\n            \t)::FLOAT8\n            \t/ count(*)\n            \t\tAS percent_failed,\n            \tsum(CASE WHEN j.state = 'error' THEN 1 ELSE 0 END)\n            \t\tAS count_errored,\n            \tsum(CASE WHEN j.state = 'failed' THEN 1 ELSE 0 END)\n            \t\tAS count_failed,\n            \tj.handler\n            FROM\n            \tjob AS j\n            WHERE\n            \tj.tool_id\n            \tIN (\n            \t\t\tSELECT\n            \t\t\t\ttool_id\n            \t\t\tFROM\n            \t\t\t\tjob AS j\n            \t\t\tWHERE\n            \t\t\t\tj.create_time\n            \t\t\t\t> (now() - '4 weeks'::INTERVAL)\n            \t\t\tGROUP BY\n            \t\t\t\tj.tool_id\n            \t\t)\n            GROUP BY\n            \tj.tool_id, j.handler\n            ORDER BY\n            \tpercent_failed_errored DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-new-errors',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_new_errors", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "ab4347bedd81c09945d910085aaac455b492403843a90a962a93ead2948b9ee0", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_popularity": {
        "code": "class GxadminSuite:\n    def time_query_tool_popularity(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-popularity',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_popularity", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "8065b1a8034e61deac50099661a9fccf60e3c75bee22287164c4a369702f4edc", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_tool_usage": {
        "code": "class GxadminSuite:\n    def time_query_tool_usage(self):\n        query = \"\"\"\n            SELECT\n            \tj.tool_id, count(*) AS count\n            FROM\n            \tjob AS j\n            GROUP BY\n            \tj.tool_id\n            ORDER BY\n            \tcount DESC;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'tool-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_tool_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "68184c8cfc068a1f9c6f0822f0157c6c7bd49531cfc12039ad10aad2398e8b1e", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_total_jobs": {
        "code": "class GxadminSuite:\n    def time_query_total_jobs(self):\n        query = \"\"\"\n            SELECT\n            \tstate, count(*)\n            FROM\n            \tjob\n            GROUP BY\n            \tstate\n            ORDER BY\n            \tstate;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'total-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_total_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3818d0d246e6b6c32aef9e408ecae1acc076f83a4cbdfaccc93efee4c712dc31", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_list": {
        "code": "class GxadminSuite:\n    def time_query_training_list(self):\n        query = \"\"\"\n            at or near \")\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "bda4d363e77bd3f6b312f83fe92fe5a97898b44c349442a789f8c8332441e753", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_members": {
        "code": "class GxadminSuite:\n    def time_query_training_members(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-members',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_members", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3fb853bb2decafd4d3c4f2589e489c94082978970643b573377769daf34b50c5", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_members_remove": {
        "code": "class GxadminSuite:\n    def time_query_training_members_remove(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-members-remove',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_members_remove", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "92d87ebd8e112b2f93aacf97b7b4619ac8bbefe3dd4262827eeb8dda43d32051", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_training_queue": {
        "code": "class GxadminSuite:\n    def time_query_training_queue(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'training-queue',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_training_queue", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "26c57eeabc866b7e097ddf231cda43614271acf00237132d501fca11366340cb", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_ts_repos": {
        "code": "class GxadminSuite:\n    def time_query_ts_repos(self):\n        query = \"\"\"\n            SELECT\n            \ttool_shed, owner, count(*)\n            FROM\n            \ttool_shed_repository\n            GROUP BY\n            \ttool_shed, owner;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'ts-repos',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_ts_repos", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "84cd64baa65daf13be00cbf2894b80ec7fe301a034deab19fb6e5d00b987f596", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_upload_gb_in_past_hour": {
        "code": "class GxadminSuite:\n    def time_query_upload_gb_in_past_hour(self):\n        query = \"\"\"\n            at or near \">\": syntax error: unimplemented: this syntax\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'upload-gb-in-past-hour',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_upload_gb_in_past_hour", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "78c405bb15390fbc099fab2c81b62034cf39ad9dba0ee21f5b83ca7e5ab9bf7a", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_cpu_years": {
        "code": "class GxadminSuite:\n    def time_query_user_cpu_years(self):\n        query = \"\"\"\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\tround(\n            \t\t\t\tsum(\n            \t\t\t\t\ta.metric_value * b.metric_value\n            \t\t\t\t\t/ 3600\n            \t\t\t\t\t/ 24\n            \t\t\t\t\t/ 365\n            \t\t\t\t),\n            \t\t\t\t2\n            \t\t\t)\n            \t\t\t\tDESC\n            \t)\n            \t\tAS rank,\n            \tjob.user_id,\n            \tCOALESCE(galaxy_user.username::STRING, 'Anonymous'),\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value * b.metric_value\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tAS cpu_years\n            FROM\n            \tjob_metric_numeric AS a,\n            \tjob_metric_numeric AS b,\n            \tjob\n            \tFULL JOIN galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            \tb.job_id = a.job_id\n            \tAND a.job_id = job.id\n            \tAND a.metric_name = 'runtime_seconds'\n            \tAND b.metric_name = 'galaxy_slots'\n            GROUP BY\n            \tjob.user_id, galaxy_user.username\n            ORDER BY\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value * b.metric_value\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tDESC\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-cpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_cpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e6c539c6070ae7194b525dad23667cb7e7cedcdf2171c10b137275096f29a110", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_disk_quota": {
        "code": "class GxadminSuite:\n    def time_query_user_disk_quota(self):\n        query = \"\"\"\n            WITH\n            \tuser_basequota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\tbasequota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tquota AS basequota,\n            \t\t\t\tuser_quota_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_quota_association.user_id\n            \t\t\t\tAND basequota.id\n            \t\t\t\t\t= user_quota_association.quota_id\n            \t\t\t\tAND basequota.operation = '='\n            \t\t\t\tAND NOT basequota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id, basequota.bytes\n            \t\t),\n            \tuser_basequota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tuser_basequota_list.user_id,\n            \t\t\t\tmax(user_basequota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tuser_basequota_list\n            \t\t\tGROUP BY\n            \t\t\t\tuser_basequota_list.user_id\n            \t\t),\n            \tuser_addquota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\taddquota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tquota AS addquota,\n            \t\t\t\tuser_quota_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_quota_association.user_id\n            \t\t\t\tAND addquota.id\n            \t\t\t\t\t= user_quota_association.quota_id\n            \t\t\t\tAND addquota.operation = '+'\n            \t\t\t\tAND NOT addquota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id, addquota.bytes\n            \t\t),\n            \tuser_addquota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tuser_addquota_list.user_id,\n            \t\t\t\tsum(user_addquota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tuser_addquota_list\n            \t\t\tGROUP BY\n            \t\t\t\tuser_addquota_list.user_id\n            \t\t),\n            \tuser_minquota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\tminquota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tquota AS minquota,\n            \t\t\t\tuser_quota_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_quota_association.user_id\n            \t\t\t\tAND minquota.id\n            \t\t\t\t\t= user_quota_association.quota_id\n            \t\t\t\tAND minquota.operation = '-'\n            \t\t\t\tAND NOT minquota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id, minquota.bytes\n            \t\t),\n            \tuser_minquota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tuser_minquota_list.user_id,\n            \t\t\t\tsum(user_minquota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tuser_minquota_list\n            \t\t\tGROUP BY\n            \t\t\t\tuser_minquota_list.user_id\n            \t\t),\n            \tgroup_basequota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\tgalaxy_group.id AS group_id,\n            \t\t\t\tbasequota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tgalaxy_group,\n            \t\t\t\tquota AS basequota,\n            \t\t\t\tgroup_quota_association,\n            \t\t\t\tuser_group_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_group_association.user_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= user_group_association.group_id\n            \t\t\t\tAND basequota.id\n            \t\t\t\t\t= group_quota_association.quota_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= group_quota_association.group_id\n            \t\t\t\tAND basequota.operation = '='\n            \t\t\t\tAND NOT basequota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id,\n            \t\t\t\tgalaxy_group.id,\n            \t\t\t\tbasequota.bytes\n            \t\t),\n            \tgroup_basequota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgroup_basequota_list.user_id,\n            \t\t\t\tgroup_basequota_list.group_id,\n            \t\t\t\tmax(group_basequota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tgroup_basequota_list\n            \t\t\tGROUP BY\n            \t\t\t\tgroup_basequota_list.user_id,\n            \t\t\t\tgroup_basequota_list.group_id\n            \t\t),\n            \tgroup_addquota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\taddquota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tgalaxy_group,\n            \t\t\t\tquota AS addquota,\n            \t\t\t\tgroup_quota_association,\n            \t\t\t\tuser_group_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_group_association.user_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= user_group_association.group_id\n            \t\t\t\tAND addquota.id\n            \t\t\t\t\t= group_quota_association.quota_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= group_quota_association.group_id\n            \t\t\t\tAND addquota.operation = '+'\n            \t\t\t\tAND NOT addquota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id, addquota.bytes\n            \t\t),\n            \tgroup_addquota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgroup_addquota_list.user_id,\n            \t\t\t\tsum(group_addquota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tgroup_addquota_list\n            \t\t\tGROUP BY\n            \t\t\t\tgroup_addquota_list.user_id\n            \t\t),\n            \tgroup_minquota_list\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id,\n            \t\t\t\tminquota.bytes AS quota\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user,\n            \t\t\t\tgalaxy_group,\n            \t\t\t\tquota AS minquota,\n            \t\t\t\tgroup_quota_association,\n            \t\t\t\tuser_group_association\n            \t\t\tWHERE\n            \t\t\t\tgalaxy_user.id\n            \t\t\t\t= user_group_association.user_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= user_group_association.group_id\n            \t\t\t\tAND minquota.id\n            \t\t\t\t\t= group_quota_association.quota_id\n            \t\t\t\tAND galaxy_group.id\n            \t\t\t\t\t= group_quota_association.group_id\n            \t\t\t\tAND minquota.operation = '-'\n            \t\t\t\tAND NOT minquota.deleted\n            \t\t\tGROUP BY\n            \t\t\t\tgalaxy_user.id,\n            \t\t\t\tgalaxy_group.id,\n            \t\t\t\tgalaxy_group.name,\n            \t\t\t\tminquota.bytes\n            \t\t),\n            \tgroup_minquota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgroup_minquota_list.user_id,\n            \t\t\t\tsum(group_minquota_list.quota) AS quota\n            \t\t\tFROM\n            \t\t\t\tgroup_minquota_list\n            \t\t\tGROUP BY\n            \t\t\t\tgroup_minquota_list.user_id\n            \t\t),\n            \tall_user_default_quota\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tgalaxy_user.id AS user_id, quota.bytes\n            \t\t\tFROM\n            \t\t\t\tgalaxy_user, quota\n            \t\t\tWHERE\n            \t\t\t\tquota.id\n            \t\t\t\t= (\n            \t\t\t\t\t\tSELECT\n            \t\t\t\t\t\t\tquota_id\n            \t\t\t\t\t\tFROM\n            \t\t\t\t\t\t\tdefault_quota_association\n            \t\t\t\t\t)\n            \t\t),\n            \tquotas\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\tall_user_default_quota.user_id AS aud_uid,\n            \t\t\t\tall_user_default_quota.bytes AS aud_quota,\n            \t\t\t\tuser_basequota.user_id AS ubq_uid,\n            \t\t\t\tuser_basequota.quota AS ubq_quota,\n            \t\t\t\tuser_addquota.user_id AS uaq_uid,\n            \t\t\t\tuser_addquota.quota AS uaq_quota,\n            \t\t\t\tuser_minquota.user_id AS umq_uid,\n            \t\t\t\tuser_minquota.quota AS umq_quota,\n            \t\t\t\tgroup_basequota.user_id AS gbq_uid,\n            \t\t\t\tgroup_basequota.quota AS gbq_quota,\n            \t\t\t\tgroup_addquota.user_id AS gaq_uid,\n            \t\t\t\tgroup_addquota.quota AS gaq_quota,\n            \t\t\t\tgroup_minquota.user_id AS gmq_uid,\n            \t\t\t\tgroup_minquota.quota AS gmq_quota\n            \t\t\tFROM\n            \t\t\t\tall_user_default_quota\n            \t\t\t\tFULL JOIN user_basequota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= user_basequota.user_id\n            \t\t\t\tFULL JOIN user_addquota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= user_addquota.user_id\n            \t\t\t\tFULL JOIN user_minquota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= user_minquota.user_id\n            \t\t\t\tFULL JOIN group_basequota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= group_basequota.user_id\n            \t\t\t\tFULL JOIN group_addquota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= group_addquota.user_id\n            \t\t\t\tFULL JOIN group_minquota ON\n            \t\t\t\t\t\tall_user_default_quota.user_id\n            \t\t\t\t\t\t= group_minquota.user_id\n            \t\t),\n            \tcomputed_quotas\n            \t\tAS (\n            \t\t\tSELECT\n            \t\t\t\taud_uid AS user_id,\n            \t\t\t\tCOALESCE(\n            \t\t\t\t\tgreatest(ubq_quota, gbq_quota),\n            \t\t\t\t\taud_quota\n            \t\t\t\t)\n            \t\t\t\t\tAS base_quota,\n            \t\t\t\tCOALESCE(uaq_quota, 0)\n            \t\t\t\t+ COALESCE(gaq_quota, 0)\n            \t\t\t\t\tAS add_quota,\n            \t\t\t\tCOALESCE(umq_quota, 0)\n            \t\t\t\t+ COALESCE(gmq_quota, 0)\n            \t\t\t\t\tAS min_quota\n            \t\t\tFROM\n            \t\t\t\tquotas\n            \t\t)\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\t(\n            \t\t\t\tcomputed_quotas.base_quota\n            \t\t\t\t+ computed_quotas.add_quota\n            \t\t\t\t- computed_quotas.min_quota\n            \t\t\t)\n            \t\t\t\tDESC\n            \t)\n            \t\tAS rank,\n            \tgalaxy_user.id AS user_id,\n            \tCOALESCE(galaxy_user.username::STRING, 'Anonymous'),\n            \tpg_size_pretty(\n            \t\tcomputed_quotas.base_quota\n            \t\t+ computed_quotas.add_quota\n            \t\t- computed_quotas.min_quota\n            \t)\n            \t\tAS quota\n            FROM\n            \tcomputed_quotas, galaxy_user\n            WHERE\n            \tcomputed_quotas.user_id = galaxy_user.id\n            GROUP BY\n            \tgalaxy_user.id,\n            \tgalaxy_user.username,\n            \tcomputed_quotas.base_quota,\n            \tcomputed_quotas.add_quota,\n            \tcomputed_quotas.min_quota\n            ORDER BY\n            \t(\n            \t\tcomputed_quotas.base_quota\n            \t\t+ computed_quotas.add_quota\n            \t\t- computed_quotas.min_quota\n            \t)\n            \t\tDESC\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-disk-quota',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_disk_quota", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "b449cc7588a870076e78741016018cd8047e1c3dee5c3cb8557a47ab01a00342", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_disk_usage": {
        "code": "class GxadminSuite:\n    def time_query_user_disk_usage(self):\n        query = \"\"\"\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\tsum(\n            \t\t\t\tCOALESCE(\n            \t\t\t\t\tdataset.total_size,\n            \t\t\t\t\tdataset.file_size,\n            \t\t\t\t\t0\n            \t\t\t\t)\n            \t\t\t)\n            \t\t\t\tDESC\n            \t)\n            \t\tAS rank,\n            \tgalaxy_user.id AS \"user id\",\n            \tCOALESCE(galaxy_user.username::STRING, 'Anonymous'),\n            \tCOALESCE(galaxy_user.email::STRING, 'Anonymous'),\n            \tsum(COALESCE(dataset.total_size, dataset.file_size, 0))\n            \t\tAS \"storage usage\"\n            FROM\n            \tdataset,\n            \tgalaxy_user,\n            \thistory_dataset_association,\n            \thistory\n            WHERE\n            \tNOT dataset.purged\n            \tAND dataset.id = history_dataset_association.dataset_id\n            \tAND history_dataset_association.history_id = history.id\n            \tAND history.user_id = galaxy_user.id\n            GROUP BY\n            \tgalaxy_user.id\n            ORDER BY\n            \t1\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-disk-usage',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_disk_usage", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3ef66b0b142e6e1603ba8c2df78abca6905cf7c3ae5983522ecf154715aad4fd", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_gpu_years": {
        "code": "class GxadminSuite:\n    def time_query_user_gpu_years(self):\n        query = \"\"\"\n            SELECT\n            \trow_number() OVER (\n            \t\tORDER BY\n            \t\t\tround(\n            \t\t\t\tsum(\n            \t\t\t\t\ta.metric_value\n            \t\t\t\t\t* length(\n            \t\t\t\t\t\t\treplace(b.metric_value, ',', '')\n            \t\t\t\t\t\t)\n            \t\t\t\t\t/ 3600\n            \t\t\t\t\t/ 24\n            \t\t\t\t\t/ 365\n            \t\t\t\t),\n            \t\t\t\t2\n            \t\t\t)\n            \t\t\t\tDESC\n            \t)\n            \t\tAS rank,\n            \tjob.user_id,\n            \tCOALESCE(galaxy_user.username::STRING, 'Anonymous'),\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value\n            \t\t\t* length(replace(b.metric_value, ',', ''))\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tAS gpu_years\n            FROM\n            \tjob_metric_numeric AS a,\n            \tjob_metric_text AS b,\n            \tjob\n            \tFULL JOIN galaxy_user ON job.user_id = galaxy_user.id\n            WHERE\n            \tb.job_id = a.job_id\n            \tAND a.job_id = job.id\n            \tAND a.metric_name = 'runtime_seconds'\n            \tAND b.metric_name = 'CUDA_VISIBLE_DEVICES'\n            GROUP BY\n            \tjob.user_id, galaxy_user.username\n            ORDER BY\n            \tround(\n            \t\tsum(\n            \t\t\ta.metric_value\n            \t\t\t* length(replace(b.metric_value, ',', ''))\n            \t\t\t/ 3600\n            \t\t\t/ 24\n            \t\t\t/ 365\n            \t\t),\n            \t\t2\n            \t)\n            \t\tDESC\n            LIMIT\n            \t50;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-gpu-years',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_gpu_years", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "344a6c902322231b6cd9a4df91ed7cb99f7fda689a257ea21566b2f8487827a3", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_history_list": {
        "code": "class GxadminSuite:\n    def time_query_user_history_list(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-history-list',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_history_list", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "0c67f5301bac1427a1c583e3d0b7135e4c0733a4b30035c3e77a04bcd0ab2954", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_user_recent_aggregate_jobs": {
        "code": "class GxadminSuite:\n    def time_query_user_recent_aggregate_jobs(self):\n        query = \"\"\"\n    \n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'user-recent-aggregate-jobs',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_user_recent_aggregate_jobs", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "e51770f58f58417055d2f2a296e744bfe69a502eb0a4e3bcbe0d641107b02eb4", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_count": {
        "code": "class GxadminSuite:\n    def time_query_users_count(self):\n        query = \"\"\"\n            SELECT\n            \tactive, external, deleted, purged, count(*) AS count\n            FROM\n            \tgalaxy_user\n            GROUP BY\n            \tactive, external, deleted, purged;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-count',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_count", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "961248750af20c202808f1c05cb949226c9273a8c71ec6cb68ae4f00763ff303", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_total": {
        "code": "class GxadminSuite:\n    def time_query_users_total(self):\n        query = \"\"\"\n            SELECT count(*) FROM galaxy_user;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-total',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_total", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "2e2675570d4e3189316d1f17b1e18f1cbb5916ed350bedeaa1ba99b15aeed2d0", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_users_with_oidc": {
        "code": "class GxadminSuite:\n    def time_query_users_with_oidc(self):\n        query = \"\"\"\n            SELECT\n            \tprovider, count(DISTINCT user_id)\n            FROM\n            \toidc_user_authnz_tokens\n            GROUP BY\n            \tprovider;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'users-with-oidc',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_users_with_oidc", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "23e36d5ce8430baa5fefe047c19eb2f5d790a262e6f9f39b9a1aff539593eb03", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workers": {
        "code": "class GxadminSuite:\n    def time_query_workers(self):\n        query = \"\"\"\n            SELECT\n            \tserver_name, hostname, pid\n            FROM\n            \tworker_process\n            WHERE\n            \tpid IS NOT NULL;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workers',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workers", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "4a8c9e0874500cc569e1596019f9ab88514060ec801feaacd47b8802136e8572", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_connections": {
        "code": "class GxadminSuite:\n    def time_query_workflow_connections(self):\n        query = \"\"\"\n            SELECT\n            \tworkflow.id AS wf_id,\n            \tworkflow.update_time::DATE AS wf_updated,\n            \tws_in.id AS in_id,\n            \tws_in.tool_id AS in_tool,\n            \tws_in.tool_version AS in_tool_v,\n            \tws_out.id AS out_id,\n            \tws_out.tool_id AS out_tool,\n            \tws_out.tool_version AS out_tool_v,\n            \tsw.published AS published,\n            \tsw.deleted AS deleted,\n            \tworkflow.has_errors AS has_errors\n            FROM\n            \tworkflow_step_connection AS wfc\n            \tLEFT JOIN workflow_step AS ws_in ON\n            \t\t\tws_in.id = wfc.output_step_id\n            \tLEFT JOIN workflow_step_input AS wsi ON\n            \t\t\twfc.input_step_input_id = wsi.id\n            \tLEFT JOIN workflow_step AS ws_out ON\n            \t\t\tws_out.id = wsi.workflow_step_id\n            \tLEFT JOIN workflow_output AS wo ON\n            \t\t\twsi.workflow_step_id = wfc.output_step_id\n            \tLEFT JOIN workflow ON ws_in.workflow_id = workflow.id\n            \tLEFT JOIN stored_workflow AS sw ON\n            \t\t\tsw.latest_workflow_id = workflow.id\n            WHERE\n            \tworkflow.id\n            \tIN (\n            \t\t\tSELECT\n            \t\t\t\tworkflow.id\n            \t\t\tFROM\n            \t\t\t\tstored_workflow\n            \t\t\t\tLEFT JOIN workflow ON\n            \t\t\t\t\t\tstored_workflow.latest_workflow_id\n            \t\t\t\t\t\t= workflow.id\n            \t\t);\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-connections',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_connections", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "93afa9c04f23568ed2b112971ee0b646f56827d6346ea9834d7d20e98aef8748", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_invocation_status": {
        "code": "class GxadminSuite:\n    def time_query_workflow_invocation_status(self):\n        query = \"\"\"\n            SELECT\n            \tCOALESCE(scheduler, 'none'),\n            \tCOALESCE(handler, 'none'),\n            \tstate,\n            \tcount(*)\n            FROM\n            \tworkflow_invocation\n            WHERE\n            \tstate IN ('new', 'ready')\n            GROUP BY\n            \thandler, scheduler, state;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-invocation-status',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_invocation_status", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "3791a20f1377f80c2736f1bd851a5c8aba92d70a43125b639d1ade63a2a68c6b", 
        "warmup_time": -1
    }, 
    "benchmarks.GxadminSuite.time_query_workflow_invocation_totals": {
        "code": "class GxadminSuite:\n    def time_query_workflow_invocation_totals(self):\n        query = \"\"\"\n            SELECT\n            \tCOALESCE(state, 'unknown'), count(*)\n            FROM\n            \tworkflow_invocation\n            GROUP BY\n            \tstate;\n        \"\"\"\n        query = subprocess.check_output([\n            '/home/hxr/arbeit/galaxy/gxadmin/gxadmin',\n            'query',\n            'workflow-invocation-totals',\n        ])", 
        "min_run_count": 2, 
        "name": "benchmarks.GxadminSuite.time_query_workflow_invocation_totals", 
        "number": 0, 
        "param_names": [], 
        "params": [], 
        "processes": 2, 
        "repeat": 0, 
        "sample_time": 0.01, 
        "timeout": 60.0, 
        "type": "time", 
        "unit": "seconds", 
        "version": "9ce36b6ecc4a7d3a1f591449c1fc5f7c954680c759faae70f9d21152b672c0fd", 
        "warmup_time": -1
    }, 
    "version": 2
}